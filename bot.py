# bot.py
import os
import io
import asyncio
from typing import List, Tuple

import numpy as np
from PIL import Image, ImageDraw, ImageFont

from sklearn.cluster import KMeans

from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message
from aiogram.filters import CommandStart

# ====== –ù–ê–°–¢–†–û–ô–ö–ò –ö–ê–ù–ê–õ–ê (–º–æ–∂–Ω–æ —Å–≤–µ—Ç–∏—Ç—å –≤ GitHub) ======
CHANNEL_USERNAME = "assistantdesign"     # –±–µ–∑ @
CHANNEL_ID = -1002608787147              # id –∫–∞–Ω–∞–ª–∞

# ====== –¢–û–ö–ï–ù (–ù–ï –°–í–ï–¢–ò–ú) ======
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")

# aiogram 3.7+: parse_mode –ø–µ—Ä–µ–¥–∞—ë–º —á–µ—Ä–µ–∑ DefaultBotProperties
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
)
dp = Dispatcher()
r = Router()
dp.include_router(r)

# ====== –¢–ï–ö–°–¢ –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø ======
HELLO = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî  –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ü–≤–µ—Ç–æ–≤ –æ—Ç –î–ò–ó –ë–ê–õ–ê–ù–° üé® "
    "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∞ —è —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É –≤ –æ—Ç–≤–µ—Ç."
)

# ====== –£–¢–ò–õ–ò–¢–´ –¶–í–ï–¢–û–í ======
def rgb_to_hex(rgb: Tuple[int, int, int]) -> str:
    return f"#{rgb[0]:02x}{rgb[1]:02x}{rgb[2]:02x}"

def text_color_for(bg: Tuple[int, int, int]) -> Tuple[int, int, int]:
    # YIQ –∫–æ–Ω—Ç—Ä–∞—Å—Ç –¥–ª—è –±–µ–ª–æ–≥–æ/—á—ë—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    r, g, b = bg
    yiq = (r*299 + g*587 + b*114) / 1000
    return (0, 0, 0) if yiq > 160 else (255, 255, 255)

def kmeans_palette(img: Image.Image, k: int = 12) -> List[Tuple[int, int, int]]:
    # —É–º–µ–Ω—å—à–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    img_small = img.copy().convert("RGB")
    img_small.thumbnail((400, 400), Image.LANCZOS)
    pixels = np.array(img_small).reshape(-1, 3)

    # KMeans
    km = KMeans(n_clusters=k, n_init=5, random_state=42)
    labels = km.fit_predict(pixels)
    centers = km.cluster_centers_.astype(int)

    # —á–∞—Å—Ç–æ—Ç—ã –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ ‚Äî —á—Ç–æ–±—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω—ã–µ
    counts = np.bincount(labels, minlength=k)
    order = np.argsort(counts)[::-1]  # –ø–æ —É–±—ã–≤–∞–Ω–∏—é —á–∞—Å—Ç–æ—Ç—ã

    palette = [tuple(int(x) for x in centers[i]) for i in order]
    return palette

def draw_palette_image(palette: List[Tuple[int, int, int]]) -> io.BytesIO:
    """
    –†–∏—Å—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É 12 —Ü–≤–µ—Ç–æ–≤ 3x4 —Å —Ö–µ–∫—Å‚Äë–ø–æ–¥–ø–∏—Å—è–º–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±—É—Ñ–µ—Ä –≥–æ—Ç–æ–≤–æ–π PNG‚Äë–∫–∞—Ä—Ç–∏–Ω–∫–∏.
    """
    # –°–µ—Ç–∫–∞ 3 –∫–æ–ª–æ–Ω–∫–∏ x 4 —Å—Ç—Ä–æ–∫–∏
    cols, rows = 3, 4
    cell_w, cell_h = 360, 220
    pad = 24
    width = cols * cell_w + (cols + 1) * pad
    height = rows * cell_h + (rows + 1) * pad + 16  # –Ω–µ–º–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞ —Å–Ω–∏–∑—É

    img = Image.new("RGB", (width, height), (245, 245, 245))
    draw = ImageDraw.Draw(img)

    # –®—Ä–∏—Ñ—Ç: –ø–æ–ø—Ä–æ–±—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π, –∏–Ω–∞—á–µ ‚Äî –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π PIL
    try:
        font = ImageFont.truetype("DejaVuSans.ttf", 34)
    except Exception:
        font = ImageFont.load_default()

    for idx, color in enumerate(palette[:12]):
        r_i = idx // cols
        c_i = idx % cols

        x0 = pad + c_i * (cell_w + pad)
        y0 = pad + r_i * (cell_h + pad)
        x1 = x0 + cell_w
        y1 = y0 + cell_h

        # —Å–∞–º —Ü–≤–µ—Ç–Ω–æ–π –±–ª–æ–∫
        draw.rectangle([x0, y0, x1, y1 - 60], fill=color)

        # –ø–æ–¥–ø–∏—Å—å HEX —Å–Ω–∏–∑—É –±–ª–æ–∫–∞
        hex_code = rgb_to_hex(color)
        text_w, text_h = draw.textsize(hex_code, font=font)
        tx = x0 + (cell_w - text_w) // 2
        ty = y1 - 52

        # —Ñ–æ–Ω —è—Ä–ª—ã—á–∫–∞ (—Å–ª–µ–≥–∫–∞ —Å–µ—Ä—ã–π)
        tag_pad = 10
        draw.rounded_rectangle(
            [tx - tag_pad, ty - tag_pad, tx + text_w + tag_pad, ty + text_h + tag_pad],
            radius=8,
            fill=(255, 255, 255)
        )
        draw.text((tx, ty), hex_code, fill=(30, 30, 30), font=font)

    buf = io.BytesIO()
    img.save(buf, format="PNG", optimize=True)
    buf.seek(0)
    return buf

async def analyze_and_reply(msg: Message, image: Image.Image) -> None:
    try:
        palette = kmeans_palette(image, k=12)
        card = draw_palette_image(palette)
        hex_list = " ".join(rgb_to_hex(c) for c in palette[:12])
        await bot.send_photo(
            chat_id=msg.chat.id,
            photo=card,
            caption=f"–ü–∞–ª–∏—Ç—Ä–∞: {hex_list}",
            reply_to_message_id=msg.message_id
        )
    except Exception:
        await msg.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ======
@r.message(CommandStart())
async def on_start(msg: Message):
    await msg.answer(HELLO)

@r.message(F.photo)
async def on_private_photo(msg: Message):
    # –±–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞
    file_id = msg.photo[-1].file_id
    file = await bot.get_file(file_id)
    buf = io.BytesIO()
    await bot.download(file, buf)
    buf.seek(0)
    img = Image.open(buf).convert("RGB")
    await analyze_and_reply(msg, img)

@r.channel_post(F.photo)
async def on_channel_photo(msg: Message):
    """
    –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞.
    –û—Ç–≤–µ—á–∞–µ–º –ø—Ä—è–º–æ –ø–æ–¥ –ø–æ—Å—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ.
    """
    # —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª (–µ—Å–ª–∏ –±–æ—Ç –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö)
    if msg.chat.id not in (CHANNEL_ID,):
        return

    file_id = msg.photo[-1].file_id
    file = await bot.get_file(file_id)
    buf = io.BytesIO()
    await bot.download(file, buf)
    buf.seek(0)
    img = Image.open(buf).convert("RGB")

    # –≥–µ–Ω–µ—Ä–∏–º –∏ –æ—Ç–≤–µ—á–∞–µ–º –≤ –∫–∞–Ω–∞–ª
    try:
        palette = kmeans_palette(img, k=12)
        card = draw_palette_image(palette)
        hex_list = " ".join(rgb_to_hex(c) for c in palette[:12])
        await bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=card,
            caption=f"–ü–∞–ª–∏—Ç—Ä–∞: {hex_list}",
            reply_to_message_id=msg.message_id
        )
    except Exception:
        await bot.send_message(
            chat_id=CHANNEL_ID,
            text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.",
            reply_to_message_id=msg.message_id
        )

async def main():
    # –ü—Ä–æ—Å—Ç–æ –ª–æ–≥‚Äë—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥–∏ Render‚Äô–∞
    print(f"color-bot | –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ–º. –ö–∞–Ω–∞–ª: @{CHANNEL_USERNAME}")
    await dp.start_polling(bot, allowed_updates=["message", "channel_post"])

if __name__ == "__main__":
    asyncio.run(main())
