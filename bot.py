import os
import io
import asyncio
from typing import List, Tuple

import numpy as np
from PIL import Image, ImageDraw, ImageFont
from sklearn.cluster import KMeans

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ö–æ–Ω—Ñ–∏–≥
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or os.getenv("telegram_bot_token")
if not BOT_TOKEN:
    raise RuntimeError("Env var TELEGRAM_BOT_TOKEN is empty")

CHANNEL_USERNAME = "desbalances"                # –Ω–∞—à –∫–∞–Ω–∞–ª (–±–µ–∑ @)
CHANNEL_LINK = f"https://t.me/{CHANNEL_USERNAME}"

START_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî  –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ü–≤–µ—Ç–æ–≤ –æ—Ç –î–ò–ó –ë–ê–õ–ê–ù–° üé® "
    "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∞ —è —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É –≤ –æ—Ç–≤–µ—Ç."
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–µ–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
kb_sub = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìå –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK)],
    [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
])

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –£—Ç–∏–ª–∏—Ç—ã —Ä–∏—Å–æ–≤–∞–Ω–∏—è/–∞–Ω–∞–ª–∏—Ç–∏–∫–∏

def pil_font(size: int) -> ImageFont.FreeTypeFont | ImageFont.ImageFont:
    for name in ("DejaVuSans.ttf", "Arial.ttf"):
        try:
            return ImageFont.truetype(name, size=size)
        except Exception:
            pass
    return ImageFont.load_default()

def to_hex(rgb: Tuple[int, int, int]) -> str:
    return "#{:02x}{:02x}{:02x}".format(*rgb)

def extract_dominant_colors(image: Image.Image, k: int = 12) -> List[Tuple[int, int, int]]:
    """KMeans –ø–æ RGB, –Ω–æ:
       - —É–º–µ–Ω—å—à–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–æ –º–∞–∫—Å. —Å—Ç–æ—Ä–æ–Ω—ã 400
       - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º k —á–∏—Å–ª–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
       - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ (—á—Ç–æ–±—ã –ø–∞–ª–∏—Ç—Ä–∞ ¬´—Å–µ—Ä–µ–¥–∏–Ω–Ω–∞—è¬ª, –Ω–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–∞—è)"""
    img = image.convert("RGB")
    max_side = 400
    w, h = img.size
    scale = min(max_side / max(w, h), 1.0)
    if scale < 1.0:
        img = img.resize((int(w * scale), int(h * scale)), Image.LANCZOS)

    arr = np.asarray(img).reshape(-1, 3).astype(np.float32)

    # –°–∫–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
    uniq = np.unique(arr.astype(np.uint8), axis=0)
    k_eff = int(min(k, max(1, len(uniq))))

    kmeans = KMeans(n_clusters=k_eff, n_init=6, random_state=42)
    labels = kmeans.fit_predict(arr)
    centers = kmeans.cluster_centers_.astype(np.uint8)

    counts = np.bincount(labels, minlength=k_eff)
    order = np.argsort(-counts)

    colors = [tuple(int(x) for x in centers[i]) for i in order]

    # –µ—Å–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö < 12 ‚Äî ¬´–¥–æ–ø–æ–ª–Ω—è–µ–º¬ª –±–ª–∏–∑–∫–∏–º–∏ –∫ —Å—Ä–µ–¥–Ω–µ–º—É –æ—Ç—Ç–µ–Ω–∫–∞–º–∏,
    # —á—Ç–æ–±—ã –∫–∞—Ä—Ç–æ—á–∫–∞ –≤—Å–µ–≥–¥–∞ –±—ã–ª–∞ –Ω–∞ 12 —Å–≤–æ—Ç—á–µ–π
    while len(colors) < k:
        mean = tuple(int(x) for x in np.mean(centers, axis=0))
        colors.append(mean)

    return colors[:k]

def draw_palette(colors: List[Tuple[int, int, int]], cols=3, rows=4) -> Image.Image:
    assert cols * rows == len(colors)

    sw, sh = 280, 220
    pad, gap = 24, 24
    caption_h = 56

    W = pad*2 + cols*sw + (cols-1)*gap
    H = pad*2 + rows*(sh+caption_h) + (rows-1)*gap

    img = Image.new("RGB", (W, H), (245, 245, 245))
    d = ImageDraw.Draw(img)
    font = pil_font(28)

    for i, rgb in enumerate(colors):
        r, c = divmod(i, cols)
        x0 = pad + c*(sw + gap)
        y0 = pad + r*(sh + caption_h + gap)

        d.rounded_rectangle([x0, y0, x0+sw, y0+sh], radius=16, fill=rgb)

        text = to_hex(rgb)
        bbox = d.textbbox((0, 0), text, font=font)
        tw, th = bbox[2]-bbox[0], bbox[3]-bbox[1]
        tx = x0 + (sw - tw)//2
        ty = y0 + sh + (caption_h - th)//2

        d.rounded_rectangle([x0+12, y0+sh+8, x0+sw-12, y0+sh+caption_h-8],
                            radius=12, fill=(255, 255, 255))
        d.text((tx, ty), text, fill=(40, 40, 40), font=font)

    return img

async def fetch_input_image(bot: Bot, message: types.Message) -> Image.Image | None:
    try:
        photo_size = max(message.photo, key=lambda p: p.file_size or 0)
        file = await bot.get_file(photo_size.file_id)
        buf = io.BytesIO()
        await bot.download(file, destination=buf)
        buf.seek(0)
        return Image.open(buf)
    except Exception:
        return None

async def build_palette(bot: Bot, message: types.Message) -> tuple[io.BytesIO, List[str]] | None:
    pil_img = await fetch_input_image(bot, message)
    if pil_img is None:
        return None
    try:
        colors = extract_dominant_colors(pil_img, k=12)
        palette = draw_palette(colors, cols=3, rows=4)
        out = io.BytesIO()
        palette.save(out, format="PNG", optimize=True)
        out.seek(0)
        return out, [to_hex(c) for c in colors]
    except Exception:
        return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏

async def is_subscribed(bot: Bot, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=f"@{CHANNEL_USERNAME}", user_id=user_id)
        return member.status in {"member", "administrator", "creator"}
    except Exception:
        # –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞ ‚Äî get_chat_member –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
        return False

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –•–µ–Ω–¥–ª–µ—Ä—ã

async def cmd_start(message: types.Message, bot: Bot):
    if not await is_subscribed(bot, message.from_user.id):
        await message.answer(
            "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
            reply_markup=kb_sub
        )
        return
    await message.answer(START_TEXT)

async def on_check_sub(callback: types.CallbackQuery, bot: Bot):
    ok = await is_subscribed(bot, callback.from_user.id)
    if ok:
        await callback.message.edit_text(START_TEXT)
    else:
        await callback.answer("–ü–æ–∫–∞ –Ω–µ –≤–∏–∂—É –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ –µ—â—ë —Ä–∞–∑.", show_alert=True)

async def handle_private_photo(message: types.Message, bot: Bot):
    if not await is_subscribed(bot, message.from_user.id):
        await message.answer(
            "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
            reply_markup=kb_sub
        )
        return

    result = await build_palette(bot, message)
    if not result:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
        return

    img_bytes, hex_list = result
    caption = "–ü–∞–ª–∏—Ç—Ä–∞: " + " ".join(hex_list)
    await message.reply_photo(
        BufferedInputFile(img_bytes.read(), "palette.png"),
        caption=caption
    )

async def handle_channel_photo(channel_post: types.Message, bot: Bot):
    # –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –≤ –∫–∞–Ω–∞–ª–µ @desbalances
    result = await build_palette(bot, channel_post)
    if not result:
        await bot.send_message(
            channel_post.chat.id,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.",
            reply_to_message_id=channel_post.message_id
        )
        return

    img_bytes, hex_list = result
    caption = "–ü–∞–ª–∏—Ç—Ä–∞: " + " ".join(hex_list)
    await bot.send_photo(
        channel_post.chat.id,
        BufferedInputFile(img_bytes.read(), "palette.png"),
        caption=caption,
        reply_to_message_id=channel_post.message_id
    )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ó–∞–ø—É—Å–∫

async def main():
    bot = Bot(token=BOT_TOKEN)          # –±–µ–∑ parse_mode –∏ DefaultBotProperties
    dp = Dispatcher()

    # –∫–æ–º–∞–Ω–¥—ã/–∫–Ω–æ–ø–∫–∏
    dp.message.register(cmd_start, CommandStart())
    dp.callback_query.register(on_check_sub, F.data == "check_sub")

    # —Ñ–æ—Ç–æ –≤ –õ–°
    dp.message.register(handle_private_photo, F.photo)

    # —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª–µ (–±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞)
    dp.channel_post.register(handle_channel_photo, F.photo)

    print("color-bot | –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ö–∞–Ω–∞–ª: @desbalances")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
