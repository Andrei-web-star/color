import os
import io
import logging
from typing import List, Tuple

from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message,
    BufferedInputFile,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.filters import CommandStart
from aiogram.enums import ChatMemberStatus

from PIL import Image, ImageDraw, ImageFont
import numpy as np
from sklearn.cluster import MiniBatchKMeans


# =========================
# –ù–ê–°–¢–†–û–ô–ö–ò
# =========================
CHANNEL_USERNAME = "desbalances"     # –≤–∞—à –∫–∞–Ω–∞–ª @desbalances (–±–µ–∑ @)
NUM_COLORS = 12                      # —Å–∫–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ–≤ –æ—Ç–¥–∞—ë–º –≤ –ø–∞–ª–∏—Ç—Ä–µ
MAX_IMAGE_SIDE = 1024                # –∫–∞–∫ —Å–∏–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
SWATCHES_PER_ROW = 4                 # —Å–µ—Ç–∫–∞ 3x4
PADDING = 32                         # –æ—Ç—Å—Ç—É–ø—ã –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –ø–∞–ª–∏—Ç—Ä—ã
GAP = 16                             # –∑–∞–∑–æ—Ä—ã –º–µ–∂–¥—É –ø–ª–∞—à–∫–∞–º–∏
LABEL_HEIGHT = 36                    # –º–µ—Å—Ç–æ –ø–æ–¥ –ø–æ–¥–ø–∏—Å—å HEX
BG_COLOR = (245, 245, 245)           # —Ñ–æ–Ω
TEXT_COLOR = (30, 30, 30)            # —Ç–µ–∫—Å—Ç
FONT_PATH = None                     # –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å .ttf —Ä—è–¥–æ–º –∏ —É–∫–∞–∑–∞—Ç—å –∏–º—è —Ñ–∞–π–ª–∞


# =========================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# =========================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
logger = logging.getLogger("color-bot")

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞.")

bot = Bot(token=BOT_TOKEN)  # –í aiogram 3: parse_mode —Å—é–¥–∞ –ù–ï –ø–µ—Ä–µ–¥–∞—ë–º
dp = Dispatcher()


# =========================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï
# =========================
def rgb_to_hex(color: Tuple[int, int, int]) -> str:
    return "#{:02x}{:02x}{:02x}".format(*color)


def resize_image(im: Image.Image, max_side: int = MAX_IMAGE_SIDE) -> Image.Image:
    w, h = im.size
    scale = max(w, h) / float(max_side)
    if scale > 1.0:
        im = im.resize((int(w / scale), int(h / scale)), Image.LANCZOS)
    return im


def preprocess_pixels(im: Image.Image) -> np.ndarray:
    """
    –ì–æ—Ç–æ–≤–∏–º –ø–∏–∫—Å–µ–ª–∏ –∫ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏:
    - —É–º–µ–Ω—å—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ;
    - –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ RGB;
    - —Å–ª–µ–≥–∫–∞ ¬´—Ä–∞–∑–±–∞–≤–ª—è–µ–º¬ª –≤—ã–±–æ—Ä–∫—É –ø–æ —è—Ä–∫–æ—Å—Ç–∏/–Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏,
      —á—Ç–æ–±—ã –ø–∞–ª–∏—Ç—Ä–∞ –ø–æ–ª—É—á–∞–ª–∞—Å—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–µ–µ.
    """
    im = im.convert("RGB")
    im = resize_image(im, MAX_IMAGE_SIDE)
    arr = np.asarray(im, dtype=np.uint8)
    h, w, _ = arr.shape
    pixels = arr.reshape(-1, 3)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º HSV ¬´–ø–æ‚Äë–±–µ–¥–Ω–æ–º—É¬ª, –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    # (–Ω–∞–º –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ V –∏ S –¥–ª—è —Å—Ç—Ä–∞—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–¥–≤—ã–±–æ—Ä–∫–∏)
    rgb = pixels.astype(np.float32) / 255.0
    maxc = rgb.max(axis=1)
    minc = rgb.min(axis=1)
    v = maxc
    s = np.where(maxc == 0, 0, (maxc - minc) / maxc)

    # –°—Ç—Ä–∞—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞: –±–µ—Ä—ë–º –ø–æ–±–æ–ª—å—à–µ —è—Ä–∫–∏—Ö/–Ω–∞—Å—ã—â–µ–Ω–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π,
    # –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–µ–º –∏ –ø—Ä–æ —Ç–∏—Ö–∏–µ —Ç–æ–Ω–∞.
    idx = np.arange(pixels.shape[0])
    weight = 0.6 * v + 0.4 * s  # 0..1
    weight = weight + 0.15      # –±–∞–∑–æ–≤—ã–π –≤–µ—Å, —á—Ç–æ–±—ã –Ω–µ –∑–∞–Ω—É–ª–∏—Ç—å —Å–µ—Ä—ã–µ
    prob = weight / weight.sum()

    sample_size = min(100_000, pixels.shape[0])  # –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ–π KMeans
    chosen = np.random.choice(idx, size=sample_size, replace=False, p=prob)
    return pixels[chosen]


def unique_colors(colors: np.ndarray, min_dist: float = 22.0) -> List[Tuple[int, int, int]]:
    """
    –£–¥–∞–ª—è–µ–º —Å–ª–∏—à–∫–æ–º –ø–æ—Ö–æ–∂–∏–µ –∫–ª–∞—Å—Ç–µ—Ä—ã.
    min_dist ‚Äî –µ–≤–∫–ª–∏–¥–æ–≤–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –≤ RGB (0..442). 22 ~ –∑–∞–º–µ—Ç–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞.
    """
    sel = []
    for c in colors:
        c = c.astype(int)
        if not sel:
            sel.append(c)
            continue
        d = np.sqrt(((np.array(sel) - c) ** 2).sum(axis=1))
        if (d >= min_dist).all():
            sel.append(c)
    return [tuple(map(int, x)) for x in sel]


def extract_palette(im: Image.Image, n: int = NUM_COLORS) -> List[Tuple[int, int, int]]:
    """
    KMeans –ø–æ RGB + –ø–æ—Å—Ç‚Äë–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è.
    """
    px = preprocess_pixels(im)
    # –ë–µ—Ä—ë–º —á—É—Ç—å –±–æ–ª—å—à–µ, –∞ –ø–æ—Ç–æ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Ö–æ–∂–∏–µ
    n_clusters = int(n * 1.8)
    n_clusters = max(n_clusters, n + 2)

    kmeans = MiniBatchKMeans(
        n_clusters=n_clusters,
        random_state=42,
        batch_size=4096,
        max_no_improvement=20,
        n_init="auto",
    )
    kmeans.fit(px)
    centers = np.clip(kmeans.cluster_centers_.round(), 0, 255).astype(np.uint8)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —è—Ä–∫–æ—Å—Ç–∏ (V)
    rgb = centers.astype(np.float32) / 255.0
    v = rgb.max(axis=1)
    order = np.argsort(v)[::-1]  # –æ—Ç —è—Ä–∫–∏—Ö –∫ —Ç—ë–º–Ω—ã–º
    centers = centers[order]

    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    palette = unique_colors(centers, min_dist=22.0)

    # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –¥–æ–±–∞–≤–∏–º –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤
    i = 0
    while len(palette) < n and i < len(centers):
        c = tuple(map(int, centers[i]))
        if c not in palette:
            palette.append(c)
        i += 1

    # –†–æ–≤–Ω–æ n —Ü–≤–µ—Ç–æ–≤
    return palette[:n]


def draw_palette_card(
    palette: List[Tuple[int, int, int]],
    swatches_per_row: int = SWATCHES_PER_ROW,
    padding: int = PADDING,
    gap: int = GAP,
    label_h: int = LABEL_HEIGHT,
) -> Image.Image:
    rows = int(np.ceil(len(palette) / swatches_per_row))
    # –ø—Ä–∏–∫–∏–Ω–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç–æ—á–∫–∏
    swatch_w = 220
    swatch_h = 140
    card_w = padding * 2 + swatches_per_row * swatch_w + (swatches_per_row - 1) * gap
    card_h = padding * 2 + rows * (swatch_h + label_h) + (rows - 1) * gap

    img = Image.new("RGB", (card_w, card_h), BG_COLOR)
    draw = ImageDraw.Draw(img)

    # –®—Ä–∏—Ñ—Ç
    font = None
    if FONT_PATH and os.path.exists(FONT_PATH):
        try:
            font = ImageFont.truetype(FONT_PATH, 22)
        except Exception:
            font = ImageFont.load_default()
    else:
        font = ImageFont.load_default()

    x = padding
    y = padding

    for i, color in enumerate(palette):
        # –ø–ª–∞—à–∫–∞
        draw.rectangle(
            [x, y, x + swatch_w, y + swatch_h],
            fill=color,
            outline=(220, 220, 220),
            width=2,
        )
        # –ø–æ–¥–ø–∏—Å—å
        hex_text = rgb_to_hex(color)
        tw, th = draw.textsize(hex_text, font=font)
        tx = x + (swatch_w - tw) // 2
        ty = y + swatch_h + (label_h - th) // 2
        draw.text((tx, ty), hex_text, font=font, fill=TEXT_COLOR)

        # —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–æ—Ç
        if (i + 1) % swatches_per_row == 0:
            x = padding
            y += swatch_h + label_h + gap
        else:
            x += swatch_w + gap

    return img


async def is_channel_subscriber(user_id: int) -> bool:
    """
    true ‚Äî –ø–æ–¥–ø–∏—Å–∞–Ω/–∞–¥–º–∏–Ω/—Å–æ–∑–¥–∞—Ç–µ–ª—å; false ‚Äî –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.
    """
    try:
        member = await bot.get_chat_member(chat_id=f"@{CHANNEL_USERNAME}", user_id=user_id)
        return member.status in {
            ChatMemberStatus.ADMINISTRATOR,
            ChatMemberStatus.CREATOR,
            ChatMemberStatus.MEMBER,
        }
    except Exception as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: %s", e)
        return False


def subscribe_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(
                text="üìå –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
                url=f"https://t.me/{CHANNEL_USERNAME}"
            ),
            InlineKeyboardButton(
                text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                callback_data="check_sub"
            ),
        ]]
    )


# =========================
# –•–ï–ù–î–õ–ï–†–´
# =========================
@dp.message(CommandStart())
async def on_start(message: Message):
    user = message.from_user
    if not user:
        return

    ok = await is_channel_subscriber(user.id)
    if not ok:
        await message.answer(
            "–≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞.\n"
            "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
            reply_markup=subscribe_keyboard(),
        )
        return

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî  –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ü–≤–µ—Ç–æ–≤ –æ—Ç –î–ò–ó –ë–ê–õ–ê–ù–° üé® "
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∞ —è —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É –≤ –æ—Ç–≤–µ—Ç.\n\n"
        "–ü—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–Ω–∏–º —Ñ–∞–π–ª–æ–º (–Ω–µ –∞–ª—å–±–æ–º–æ–º)."
    )


@dp.callback_query(F.data == "check_sub")
async def on_check_sub(cb):
    ok = await is_channel_subscriber(cb.from_user.id)
    if ok:
        await cb.message.edit_text(
            "–ì–æ—Ç–æ–≤–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã ‚úÖ\n–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ ‚Äî –ø—Ä–∏—à–ª—é –ø–∞–ª–∏—Ç—Ä—É –∏–∑ 12 —Ü–≤–µ—Ç–æ–≤."
        )
    else:
        await cb.answer("–ü–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ü§∑‚Äç‚ôÇÔ∏è", show_alert=True)


@dp.message(F.photo)
async def on_photo(message: Message):
    user = message.from_user
    if not user:
        return

    # –∑–∞—â–∏—Ç–∞: –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    if not await is_channel_subscriber(user.id):
        await message.answer(
            "–≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∫–∞–Ω–∞–ª–∞.\n"
            "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
            reply_markup=subscribe_keyboard(),
        )
        return

    try:
        # –±–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø—Ä–µ–≤—å—é
        photo_size = message.photo[-1]
        buf = io.BytesIO()
        await bot.download(photo_size, destination=buf)
        buf.seek(0)

        with Image.open(buf) as im:
            palette = extract_palette(im, n=NUM_COLORS)
            card = draw_palette_card(palette)

        out = io.BytesIO()
        card.save(out, format="PNG")
        out.seek(0)

        photo = BufferedInputFile(out.getvalue(), filename="palette.png")
        caption_lines = ["–ü–∞–ª–∏—Ç—Ä–∞:"]
        caption_lines.extend(rgb_to_hex(c) for c in palette)
        caption = " ".join(caption_lines)

        await message.answer_photo(photo=photo, caption=caption)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %s", e)
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ."
        )


@dp.message()
async def on_other(message: Message):
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ ‚Äî —è —Å–¥–µ–ª–∞—é –ø–∞–ª–∏—Ç—Ä—É –∏–∑ 12 —Ü–≤–µ—Ç–æ–≤.")


# =========================
# main
# =========================
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è. –ö–∞–Ω–∞–ª: @%s", CHANNEL_USERNAME)
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
