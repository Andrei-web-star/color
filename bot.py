"""
–ë–æ—Ç: –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞–ª–∏—Ç—Ä—ã –∏–∑ 12 —Ü–≤–µ—Ç–æ–≤ —Å HEX-–ø–æ–¥–ø–∏—Å—è–º–∏.
–î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –≤ –õ–° ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ (@assistantdesign).
–í –∫–∞–Ω–∞–ª–µ –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –ø–∞–ª–∏—Ç—Ä–æ–π –Ω–∞ –ø–æ—Å—Ç —Å —Ñ–æ—Ç–æ (–±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞).

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: aiogram==3.7.0, Pillow==11.0.0, numpy==1.26.4
–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–∞ Render (Background Worker): python bot.py
–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_BOT_TOKEN
"""

import os
import io
import asyncio
from typing import List, Tuple

import numpy as np
from PIL import Image, ImageDraw, ImageFont

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart
from aiogram.exceptions import TelegramBadRequest

# =========================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# =========================
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("Env var TELEGRAM_BOT_TOKEN is empty")

# Username –∫–∞–Ω–∞–ª–∞ (—Å @). –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.
CHANNEL_USERNAME = "@assistantdesign"

WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî  –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ü–≤–µ—Ç–æ–≤ –æ—Ç –î–ò–ó –ë–ê–õ–ê–ù–° üé® "
    "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∞ —è —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É –≤ –æ—Ç–≤–µ—Ç."
)

# =========================
# –£—Ç–∏–ª–∏—Ç—ã: —à—Ä–∏—Ñ—Ç—ã/—Ç–µ–∫—Å—Ç
# =========================
def load_font(size: int) -> ImageFont.ImageFont:
    """–ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π PIL."""
    for name in ("DejaVuSans.ttf", "Arial.ttf", "FreeSans.ttf"):
        try:
            return ImageFont.truetype(name, size=size)
        except Exception:
            continue
    return ImageFont.load_default()


def text_size(draw: ImageDraw.ImageDraw, text: str,
              font: ImageFont.ImageFont) -> Tuple[int, int]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ (Pillow ‚â•10: textbbox)."""
    left, top, right, bottom = draw.textbbox((0, 0), text, font=font)
    return right - left, bottom - top


def to_hex(rgb: Tuple[int, int, int]) -> str:
    """RGB -> '#rrggbb' (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä)."""
    r, g, b = rgb
    return f"#{r:02x}{g:02x}{b:02x}"


# =========================
# –ü–∞–ª–∏—Ç—Ä–∞ (–±–µ–∑ scikit-learn)
# =========================
def dominant_colors(img: Image.Image, k: int = 12) -> List[Tuple[int, int, int]]:
    """
    –ü–æ–ª—É—á–∞–µ–º k –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —Ü–≤–µ—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –º–µ–¥–∏–∞–Ω–Ω–æ–≥–æ –∫–≤–∞–Ω—Ç–∞–π–∑–µ—Ä–∞ Pillow.
    1) —É–º–µ–Ω—å—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏,
    2) quantize(colors=k, method=MEDIANCUT),
    3) –±–µ—Ä—ë–º —Ç–æ–ø-k –ø–æ —á–∞—Å—Ç–æ—Ç–µ.
    """
    work = img.convert("RGB")

    # –£–º–µ–Ω—å—à–∞–µ–º, —á—Ç–æ–±—ã —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —à—É–º–∞ –∏ —É—Å–∫–æ—Ä–∏—Ç—å –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ
    max_side = 512
    scale = min(1.0, max_side / max(work.size))
    if scale < 1.0:
        work = work.resize(
            (int(work.width * scale), int(work.height * scale)),
            Image.LANCZOS
        )

    # –ö–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –¥–æ k
    q = work.quantize(colors=k, method=Image.MEDIANCUT)
    q_rgb = q.convert("RGB")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ (count, (r,g,b))
    colors = q_rgb.getcolors(maxcolors=q_rgb.width * q_rgb.height) or []
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é count
    colors.sort(key=lambda t: t[0], reverse=True)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º k RGB
    top = [tuple(map(int, rgb)) for count, rgb in colors[:k]]
    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –¥–æ–±–∏–≤–∞–µ–º –¥–æ k (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –º–µ–Ω—å—à–µ)
    while len(top) < k and top:
        top.append(top[len(top) % len(top)])
    return top[:k]


def build_palette_card(colors: List[Tuple[int, int, int]]) -> bytes:
    """
    –†–∏—Å—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É 3x4 —Å –∫—Ä—É–ø–Ω—ã–º–∏ HEX‚Äë–ø–æ–¥–ø–∏—Å—è–º–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º PNG –∫–∞–∫ bytes.
    """
    assert len(colors) == 12, "–û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–æ–≤–Ω–æ 12 —Ü–≤–µ—Ç–æ–≤"

    cols, rows = 3, 4           # —Å–µ—Ç–∫–∞ 3√ó4
    sw, sh = 280, 220           # —Ä–∞–∑–º–µ—Ä —Å–≤–æ—Ç—á–∞
    gap, pad = 24, 24           # –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –∏ –ø–æ–ª—è
    label_h = 56                # –≤—ã—Å–æ—Ç–∞ –ø–æ–¥ –ø–æ–¥–ø–∏—Å—å—é
    bg = (245, 245, 245)        # —Ñ–æ–Ω –∫–∞—Ä—Ç–æ—á–∫–∏

    W = pad * 2 + cols * sw + (cols - 1) * gap
    H = pad * 2 + rows * (sh + label_h) + (rows - 1) * gap

    img = Image.new("RGB", (W, H), bg)
    draw = ImageDraw.Draw(img)
    font = load_font(28)

    for i, rgb in enumerate(colors):
        r_idx, c_idx = divmod(i, cols)  # —Å—Ç—Ä–æ–∫–∞/–∫–æ–ª–æ–Ω–∫–∞
        x0 = pad + c_idx * (sw + gap)
        y0 = pad + r_idx * (sh + label_h + gap)

        # –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Ü–≤–µ—Ç–∞ (—Å–æ —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º)
        draw.rounded_rectangle([x0, y0, x0 + sw, y0 + sh],
                               radius=16, fill=rgb)

        # –ü–æ–¥–ø–∏—Å—å HEX (–ø–æ —Ü–µ–Ω—Ç—Ä—É –ø–æ–¥ —Å–≤–æ—Ç—á–µ–º)
        hex_code = to_hex(rgb)
        tw, th = text_size(draw, hex_code, font)
        tx = x0 + (sw - tw) // 2
        ty = y0 + sh + (label_h - th) // 2

        # –°–≤–µ—Ç–ª–∞—è –ø–ª–∞—à–∫–∞ –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        draw.rounded_rectangle([x0 + 12, y0 + sh + 8, x0 + sw - 12,
                                y0 + sh + label_h - 8],
                               radius=12, fill=(255, 255, 255))
        draw.text((tx, ty), hex_code, fill=(40, 40, 40), font=font)

    buf = io.BytesIO()
    img.save(buf, format="PNG", optimize=True)
    buf.seek(0)
    return buf.getvalue()


# =========================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
# =========================
def subscribe_keyboard() -> types.InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏: –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è / –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É."""
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text="üìå –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
            url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"
        )],
        [types.InlineKeyboardButton(
            text="üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
            callback_data="check_sub"
        )]
    ])


async def is_subscriber(bot: Bot, user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª.
    –¢—Ä–µ–±—É–µ—Ç—Å—è, —á—Ç–æ–±—ã –±–æ—Ç –≤–∏–¥–µ–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–ª—É—á—à–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –µ–≥–æ –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞).
    """
    try:
        m = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return getattr(m, "status", "") in ("creator", "administrator", "member")
    except TelegramBadRequest:
        # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π/–Ω–µ—Ç –ø—Ä–∞–≤) ‚Äî —Å—á–∏—Ç–∞–µ–º –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        return False
    except Exception:
        return False


# =========================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
# =========================
async def read_input_image(bot: Bot, message: types.Message) -> Image.Image | None:
    """–°–∫–∞—á–∏–≤–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–∫ PIL.Image."""
    try:
        # –ë–µ—Ä—ë–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ
        ph = max(message.photo, key=lambda p: p.file_size or 0)
        file = await bot.get_file(ph.file_id)
        buf = io.BytesIO()
        await bot.download(file, destination=buf)
        buf.seek(0)
        return Image.open(buf).convert("RGB")
    except Exception:
        return None


async def process_and_reply(bot: Bot, message: types.Message) -> None:
    """–°—Ç—Ä–æ–∏–º –ø–∞–ª–∏—Ç—Ä—É 12 —Ü–≤–µ—Ç–æ–≤ –∏ –æ—Ç–≤–µ—á–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–æ–π + —Å–ø–∏—Å–∫–æ–º HEX."""
    pil = await read_input_image(bot, message)
    if pil is None:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
        return

    try:
        colors = dominant_colors(pil, k=12)              # 12 –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —Ü–≤–µ—Ç–æ–≤
        png = build_palette_card(colors)                 # PNG‚Äë–∫–∞—Ä—Ç–æ—á–∫–∞
        hex_list = " ".join(to_hex(c) for c in colors)   # –ø–æ–¥–ø–∏—Å—å (—Å—Ç—Ä–æ–∫–æ–π)

        await message.reply_photo(
            photo=types.BufferedInputFile(png, filename="palette.png"),
            caption=f"–ü–∞–ª–∏—Ç—Ä–∞: {hex_list}"
        )
    except Exception:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")


# =========================
# –•—ç–Ω–¥–ª–µ—Ä—ã
# =========================
async def on_start(message: types.Message, bot: Bot) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤."""
    user_id = message.from_user.id
    if await is_subscriber(bot, user_id):
        await message.answer(WELCOME_TEXT)
    else:
        await message.answer(
            "–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∫–∞–Ω–∞–ª–∞.\n"
            "–ü–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
            reply_markup=subscribe_keyboard()
        )


async def on_check_sub(call: types.CallbackQuery, bot: Bot) -> None:
    """–ö–Ω–æ–ø–∫–∞ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª."""
    ok = await is_subscriber(bot, call.from_user.id)
    if ok:
        await call.message.edit_text(WELCOME_TEXT)
    else:
        await call.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üòï", show_alert=True)


async def on_private_photo(message: types.Message, bot: Bot) -> None:
    """–§–æ—Ç–æ –≤ –õ–°: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤."""
    if not await is_subscriber(bot, message.from_user.id):
        await message.answer(
            "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞.",
            reply_markup=subscribe_keyboard()
        )
        return
    await process_and_reply(bot, message)


async def on_channel_photo(channel_post: types.Message, bot: Bot) -> None:
    """
    –ü–æ—Å—Ç —Å —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª–µ: –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –ø–∞–ª–∏—Ç—Ä–æ–π –≤ —Ç—Ä–µ–¥–µ –ø–æ—Å—Ç–∞.
    –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞.
    """
    try:
        pil = await read_input_image(bot, channel_post)
        if pil is None:
            raise ValueError("no image")

        colors = dominant_colors(pil, k=12)
        png = build_palette_card(colors)
        hex_list = " ".join(to_hex(c) for c in colors)

        await bot.send_photo(
            chat_id=channel_post.chat.id,
            photo=types.BufferedInputFile(png, filename="palette.png"),
            caption=f"–ü–∞–ª–∏—Ç—Ä–∞: {hex_list}",
            reply_to_message_id=channel_post.message_id
        )
    except Exception:
        await bot.send_message(
            chat_id=channel_post.chat.id,
            text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.",
            reply_to_message_id=channel_post.message_id
        )


# =========================
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# =========================
async def main() -> None:
    """–ó–∞–ø—É—Å–∫ long polling."""
    bot = Bot(token=BOT_TOKEN)       # –±–µ–∑ parse_mode –∏ –±–µ–∑ DefaultBotProperties
    dp = Dispatcher()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
    dp.message.register(on_start, CommandStart())
    dp.callback_query.register(on_check_sub, F.data == "check_sub")
    dp.message.register(on_private_photo, F.photo)
    dp.channel_post.register(on_channel_photo, F.photo)

    print("color-bot | –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—ë–º –∞–ø–¥–µ–π—Ç—ã‚Ä¶")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
