
import os
import io
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, FSInputFile
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ Render ‚Üí Environment
CHANNEL_ID = "@DesignAssistant"  # username –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ ID

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞–ª–∏—Ç—Ä—ã
def generate_palette(image_path, num_colors=12):
    image = Image.open(image_path).convert('RGB')
    image = image.resize((200, 200))  # —É—Å–∫–æ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    data = np.array(image).reshape(-1, 3)

    # –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤ (k-means)
    from sklearn.cluster import KMeans
    kmeans = KMeans(n_clusters=num_colors, random_state=0).fit(data)
    colors = np.array(kmeans.cluster_centers_, dtype=int)

    # –†–∏—Å—É–µ–º –ø–∞–ª–∏—Ç—Ä—É
    fig, ax = plt.subplots(1, 1, figsize=(12, 2))
    for i, color in enumerate(colors):
        ax.add_patch(plt.Rectangle((i, 0), 1, 1, color=np.array(color) / 255))
        ax.text(i + 0.5, -0.5, '#%02x%02x%02x' % tuple(color),
                ha='center', va='top', fontsize=10)
    ax.set_xlim(0, num_colors)
    ax.set_ylim(0, 1)
    ax.axis('off')

    buf = io.BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close(fig)
    return buf

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ü–≤–µ—Ç–æ–≤ –æ—Ç –î–ò–ó –ë–ê–õ–ê–ù–° üé®\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∞ —è —Ç–µ–±–µ –ø—Ä–∏—à–ª—é –ø–∞–ª–∏—Ç—Ä—É –∏–∑ 12 —Ü–≤–µ—Ç–æ–≤."
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
@dp.message(F.photo)
async def handle_photo(message: Message):
    try:
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        file_path = file.file_path

        # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        image_data = await bot.download_file(file_path)
        temp_path = "temp.jpg"
        with open(temp_path, "wb") as f:
            f.write(image_data.read())

        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞–ª–∏—Ç—Ä—É
        palette_buf = generate_palette(temp_path)

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer_photo(photo=palette_buf, caption="–í–æ—Ç –ø–∞–ª–∏—Ç—Ä–∞ üé®")

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
        palette_buf.seek(0)
        await bot.send_photo(CHANNEL_ID, photo=palette_buf, caption="–ù–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ üé®")

    except Exception as e:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
        print("–û—à–∏–±–∫–∞:", e)

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
