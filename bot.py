import io
import os
import math
import random
from typing import List, Tuple

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default_bot_properties import DefaultBotProperties
from aiogram.types import Message, BufferedInputFile
from aiogram.filters import Command

from PIL import Image, ImageDraw, ImageFont
import numpy as np


# ‚îÄ‚îÄ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –Ω–∞ Render –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
NUM_COLORS = 12                               # —Ö–æ—Ç–∏–º –≤—Å–µ–≥–¥–∞ 12 —Ü–≤–µ—Ç–æ–≤
MAX_SIDE = 512                                # –¥–æ –∫–∞–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å–∂–∏–º–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É
SEED = 13                                     # –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å k-means

WELCOME = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî  –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ü–≤–µ—Ç–æ–≤ –æ—Ç –î–ò–ó –ë–ê–õ–ê–ù–° üé® "
    "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∞ —è —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É –≤ –æ—Ç–≤–µ—Ç."
)


# ‚îÄ‚îÄ —É—Ç–∏–ª–∏—Ç—ã —Ü–≤–µ—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def rgb_to_hsv(c: np.ndarray) -> np.ndarray:
    """RGB [0..255] -> HSV [H 0..360, S 0..1, V 0..1] –¥–ª—è –º–∞—Å—Å–∏–≤–∞ (N,3)."""
    c = c.astype(np.float32) / 255.0
    r, g, b = c[:, 0], c[:, 1], c[:, 2]
    mx = np.max(c, axis=1)
    mn = np.min(c, axis=1)
    diff = mx - mn + 1e-6

    h = np.zeros_like(mx)
    mask = mx == r
    h[mask] = (60 * ((g[mask] - b[mask]) / diff[mask]) + 360) % 360
    mask = mx == g
    h[mask] = (60 * ((b[mask] - r[mask]) / diff[mask]) + 120) % 360
    mask = mx == b
    h[mask] = (60 * ((r[mask] - g[mask]) / diff[mask]) + 240) % 360

    s = diff / (mx + 1e-6)
    v = mx
    return np.stack([h, s, v], axis=1)


def hsv_distance(a: np.ndarray, b: np.ndarray) -> float:
    """–≠–≤–∫–ª–∏–¥–æ–≤–∞ –º–µ—Ç—Ä–∏–∫–∞ –≤ HSV —Å —É—á—ë—Ç–æ–º –∫—Ä—É–≥–æ–≤–æ–π –æ—Å–∏ Hue."""
    dh = np.minimum(np.abs(a[0] - b[0]), 360 - np.abs(a[0] - b[0])) / 180.0  # [0..1]
    ds = np.abs(a[1] - b[1])
    dv = np.abs(a[2] - b[2])
    # –≤–µ—Å–∞: hue –≤–∞–∂–Ω–µ–µ, —á–µ–º S/V
    return math.sqrt((1.6 * dh) ** 2 + (1.0 * ds) ** 2 + (1.0 * dv) ** 2)


def hex_color(rgb: Tuple[int, int, int]) -> str:
    return "#{:02x}{:02x}{:02x}".format(*rgb)


# ‚îÄ‚îÄ –ª—ë–≥–∫–∏–π K-Means –±–µ–∑ sklearn ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def kmeans(pixels: np.ndarray, k: int, iters: int = 12, seed: int = 13) -> Tuple[np.ndarray, np.ndarray]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (centroids[k,3], labels[n]) –¥–ª—è RGB-–ø–∏–∫—Å–µ–ª–µ–π.
    –ü—Ä–æ—Å—Ç–æ–π MiniBatch: –±–µ—Ä—ë–º –Ω–µ–±–æ–ª—å—à–∏–µ –±–∞—Ç—á–∏ –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏.
    """
    rng = np.random.default_rng(seed)
    n = pixels.shape[0]
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—Ç—Ä–æ–≤ —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ–¥–≤—ã–±–æ—Ä–∫–æ–π
    centers = pixels[rng.choice(n, size=min(k, n), replace=False)].astype(np.float32)
    if centers.shape[0] < k:  # –µ—Å–ª–∏ –ø–∏–∫—Å–µ–ª–µ–π –º–∞–ª–æ ‚Äî –¥—É–±–ª–∏—Ä—É–µ–º
        reps = k - centers.shape[0]
        centers = np.vstack([centers, centers[rng.choice(centers.shape[0], reps, replace=True)]])
    # –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    for _ in range(iters):
        # –º–∏–Ω–∏-–±–∞—Ç—á
        batch_idx = rng.choice(n, size=min(5000, n), replace=False)
        batch = pixels[batch_idx].astype(np.float32)
        # –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏
        dists = np.sum((batch[:, None, :] - centers[None, :, :]) ** 2, axis=2)  # (B, k)
        labels = np.argmin(dists, axis=1)
        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–æ–≤
        for i in range(k):
            mask = labels == i
            if np.any(mask):
                centers[i] = batch[mask].mean(axis=0)
    # —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏ –Ω–∞ –≤—Å–µ—Ö –ø–∏–∫—Å–µ–ª—è—Ö
    dists_all = np.sum((pixels[:, None, :].astype(np.float32) - centers[None, :, :]) ** 2, axis=2)
    labels_all = np.argmin(dists_all, axis=1)
    return centers.astype(np.uint8), labels_all


def ensure_diverse_palette(centers: np.ndarray, counts: np.ndarray, need: int) -> List[Tuple[int, int, int]]:
    """
    –ë–µ—Ä—ë–º –±–æ–ª—å—à–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤, –∑–∞—Ç–µ–º –∂—ë—Å—Ç–∫–æ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏ –ø–æ HSV-–¥–∏—Å—Ç–∞–Ω—Ü–∏–∏,
    –∏ –∂–∞–¥–Ω–æ –Ω–∞–±–∏—Ä–∞–µ–º –Ω–µ –º–µ–Ω–µ–µ `need` —Ü–≤–µ—Ç–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ.
    """
    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä—ã –ø–æ –≤–∫–ª–∞–¥—É (—á–∞—Å—Ç–æ—Ç–µ)
    idx = np.argsort(counts)[::-1]
    centers = centers[idx]
    counts = counts[idx]

    hsv = rgb_to_hsv(centers)
    picked = []
    picked_hsv = []
    min_dist = 0.22  # –ø–æ—Ä–æ–≥ "–¥—É–±–ª–∏–∫–∞—Ç–∞" (—ç–º–ø–∏—Ä–∏—á–µ—Å–∫–∏)

    for i, c in enumerate(centers):
        chsv = hsv[i]
        if not picked:
            picked.append(tuple(int(x) for x in c))
            picked_hsv.append(chsv)
            continue
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ "—Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ"
        if all(hsv_distance(chsv, ph) >= min_dist for ph in picked_hsv):
            picked.append(tuple(int(x) for x in c))
            picked_hsv.append(chsv)
        if len(picked) == need:
            break

    # –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ ‚Äî –¥–æ–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ ¬´–Ω–µ –æ—á–µ–Ω—å —Ä–∞–∑–Ω—ã–µ¬ª
    j = 0
    while len(picked) < need and j < len(centers):
        c = centers[j]
        t = tuple(int(x) for x in c)
        if t not in picked:
            picked.append(t)
        j += 1

    # –µ—Å–ª–∏ –∏ —Ç–∞–∫ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ (–∫—Ä–∞–π–Ω–µ –æ–¥–Ω–æ—Ç–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞) ‚Äî –¥—É–±–ª–∏—Ä—É–µ–º/–¥–∂–∏—Ç—Ç–µ—Ä–∏–º
    while len(picked) < need:
        base = random.choice(picked)
        # –ª—ë–≥–∫–∏–π –¥–∂–∏—Ç—Ç–µ—Ä ¬±6
        jitter = tuple(int(max(0, min(255, base[i] + random.randint(-6, 6)))) for i in range(3))
        picked.append(jitter)

    return picked[:need]


def extract_palette(img: Image.Image, need: int = NUM_COLORS) -> List[Tuple[int, int, int]]:
    """–£—Å—Ç–æ–π—á–∏–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º, –±–µ–∑ –ø–∞–¥–µ–Ω–∏–π –Ω–∞ –æ–¥–Ω–æ—Ç–æ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ."""
    # –ø—Ä–∏–≤–æ–¥–∏–º –∫ RGB –∏ —É–º–µ–Ω—å—à–∞–µ–º
    img = img.convert("RGB")
    w, h = img.size
    scale = min(1.0, MAX_SIDE / max(w, h))
    if scale < 1.0:
        img = img.resize((int(w * scale), int(h * scale)), Image.LANCZOS)

    arr = np.array(img)  # (H, W, 3)
    # —Å—ç–º–ø–ª–∏—Ä—É–µ–º –ø–∏–∫—Å–µ–ª–∏ (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ)
    pixels = arr.reshape(-1, 3)
    n = pixels.shape[0]
    if n > 120_000:
        rng = np.random.default_rng(SEED)
        pixels = pixels[rng.choice(n, size=120_000, replace=False)]

    # –Ω–µ–º–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞: —É–±–∏—Ä–∞–µ–º —è–≤–Ω—ã–π —à—É–º ‚Äî –ø–æ—á—Ç–∏-–±–µ–ª—ã–µ –∏ –ø–æ—á—Ç–∏-—á—ë—Ä–Ω—ã–µ –∑–∞–±—å—ë–º –ø–æ–∑–∂–µ
    mask_white = np.all(pixels > 248, axis=1)
    mask_black = np.all(pixels < 7, axis=1)
    core = pixels[~(mask_white | mask_black)]
    if core.shape[0] < 500:
        core = pixels  # —Å–ª–∏—à–∫–æ–º –æ–¥–Ω–æ—Ç–æ–Ω–Ω–æ–µ ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º —Å–æ –≤—Å–µ–º

    # –∫–ª–∞—Å—Ç–µ—Ä–∏–∑—É–µ–º —Å –∑–∞–ø–∞—Å–æ–º, –ø–æ—Ç–æ–º —Å—Ö–ª–æ–ø—ã–≤–∞–µ–º
    k_init = max(need * 3, need + 6)
    centers, labels = kmeans(core, k=k_init, iters=14, seed=SEED)
    # —Å—á–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    counts = np.bincount(labels, minlength=centers.shape[0])

    # —á–∏—Å—Ç–∏–º –¥—É–±–ª–∏ –∏ –Ω–∞–±–∏—Ä–∞–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
    picked = ensure_diverse_palette(centers, counts, need)

    # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ –ø–æ–∫—Ä—ã—Ç–∏—é (–ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ü–µ–Ω—Ç—Ä–∞)
    # ‚Äî —á—Ç–æ–±—ã —Å–≤–µ—Ä—Ö—É —à–ª–∏ –±–æ–ª–µ–µ "–¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ" —Ç–æ–Ω–∞
    def nearest_count(c):
        # –Ω–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —Ü–µ–Ω—Ç—Ä –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∏ –±–µ—Ä—ë–º –µ–≥–æ —Ä–∞–∑–º–µ—Ä
        dif = np.sum((centers.astype(np.int16) - np.array(c, np.int16)) ** 2, axis=1)
        j = int(np.argmin(dif))
        return int(counts[j])

    picked.sort(key=nearest_count, reverse=True)
    return picked[:need]


# ‚îÄ‚îÄ —Ä–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ 3√ó4 ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def render_palette_card(colors: List[Tuple[int, int, int]]) -> bytes:
    cols, rows = 3, 4
    assert len(colors) >= cols * rows
    sw, sh = 260, 160            # —Ä–∞–∑–º–µ—Ä –ø–ª–∏—Ç–∫–∏
    pad = 24                      # –æ—Ç—Å—Ç—É–ø—ã
    gap = 18                      # —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–ª–∏—Ç–∫–∞–º–∏
    label_h = 42                  # –º–µ—Å—Ç–æ –ø–æ–¥ HEX

    W = pad * 2 + cols * sw + (cols - 1) * gap
    H = pad * 2 + rows * (sh + label_h) + (rows - 1) * gap
    img = Image.new("RGB", (W, H), (250, 250, 250))
    draw = ImageDraw.Draw(img)

    try:
        # —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å ‚Äî –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        font = ImageFont.truetype("DejaVuSans.ttf", 26)
    except Exception:
        font = ImageFont.load_default()

    k = 0
    for r in range(rows):
        for c in range(cols):
            x = pad + c * (sw + gap)
            y = pad + r * (sh + label_h + gap)

            color = colors[k]
            k += 1

            # –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Ü–≤–µ—Ç–∞
            draw.rectangle([x, y, x + sw, y + sh], fill=color, outline=(230, 230, 230))

            # –ø–æ–¥–ø–∏—Å—å HEX
            text = hex_color(color)
            # –∑–∞–º–µ–Ω—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π textsize -> textbbox
            bbox = draw.textbbox((0, 0), text, font=font)
            tw, th = bbox[2] - bbox[0], bbox[3] - bbox[1]

            tx = x + (sw - tw) // 2
            ty = y + sh + (label_h - th) // 2

            # –ª–µ–≥–∫–∞—è –ø–æ–¥–ª–æ–∂–∫–∞ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
            draw.rounded_rectangle([tx - 8, ty - 4, tx + tw + 8, ty + th + 4], radius=6, fill=(255, 255, 255))
            draw.text((tx, ty), text, fill=(30, 30, 30), font=font)

    bio = io.BytesIO()
    img.save(bio, format="PNG", optimize=True)
    return bio.getvalue()


# ‚îÄ‚îÄ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


@dp.message(Command("start"))
async def on_start(message: Message):
    await message.answer(WELCOME)


@dp.message(F.photo)
async def on_photo(message: Message):
    try:
        # —Å–∫–∞—á–∏–≤–∞–µ–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        file = await bot.download(message.photo[-1].file_id)
        file.seek(0)
        img = Image.open(file)

        colors = extract_palette(img, need=NUM_COLORS)
        png_bytes = render_palette_card(colors)

        await message.answer_photo(
            photo=BufferedInputFile(png_bytes, filename="palette.png"),
            caption="–ü–∞–ª–∏—Ç—Ä–∞: " + " ".join(hex_color(c) for c in colors[:NUM_COLORS])
        )
    except Exception as e:
        # –Ω–µ –ø–∞–¥–∞–µ–º –∏ –¥–∞—ë–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {type(e).__name__}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –µ—â—ë —Ä–∞–∑.")


async def main():
    print("color-bot: –±–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
