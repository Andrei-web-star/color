import asyncio
import io
import logging
import os
from typing import List, Tuple

import numpy as np
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ChatMemberStatus
from aiogram.exceptions import TelegramConflictError
from aiogram.filters import CommandStart
from aiogram.types import BufferedInputFile, Message
from PIL import Image, ImageDraw, ImageFont
from sklearn.cluster import KMeans


# ========= –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =========
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")

CHANNEL_USERNAME = "@desbalances"  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ username –∫–∞–Ω–∞–ª–∞
NUM_COLORS = 12                     # —Å–∫–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ–≤ –≤ –ø–∞–ª–∏—Ç—Ä–µ
CARD_COLUMNS = 3
CARD_ROWS = 4
TILE_W, TILE_H = 340, 240           # —Ä–∞–∑–º–µ—Ä ‚Äú–ø–ª–∏—Ç–∫–∏‚Äù —Ü–≤–µ—Ç–∞
PADDING = 24                        # –æ—Ç—Å—Ç—É–ø—ã –≤–æ–∫—Ä—É–≥ —Å–µ—Ç–∫–∏
GAP = 18                            # —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–ª–∏—Ç–∫–∞–º–∏
BG_COLOR = (245, 245, 245)          # —Ñ–æ–Ω –∫–∞—Ä—Ç–æ—á–∫–∏


# ========= –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ =========
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s: %(message)s",
)
log = logging.getLogger("color-bot")


# ========= –£—Ç–∏–ª–∫–∏ =========
def pil_to_bytes(pil: Image.Image, fmt="PNG") -> bytes:
    buf = io.BytesIO()
    pil.save(buf, format=fmt)
    return buf.getvalue()


def rgb_to_hex(rgb: Tuple[int, int, int]) -> str:
    return "#{:02x}{:02x}{:02x}".format(*rgb)


def downscale(img: Image.Image, max_side: int = 800) -> Image.Image:
    w, h = img.size
    scale = max(w, h) / max_side if max(w, h) > max_side else 1.0
    if scale > 1:
        img = img.resize((int(w / scale), int(h / scale)), Image.Resampling.LANCZOS)
    return img


def extract_palette(img: Image.Image, n_final: int = 12, oversample: int = 28) -> List[Tuple[int, int, int]]:
    """
    1) —É–º–µ–Ω—å—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –±–µ—Ä—ë–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–¥–≤—ã–±–æ—Ä–∫—É –ø–∏–∫—Å–µ–ª–µ–π;
    2) KMeans —Å k=oversample -> –≥—Ä—É–±—ã–µ —Ü–µ–Ω—Ç—Ä—ã;
    3) —É–¥–∞–ª—è–µ–º –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏–µ —Ü–µ–Ω—Ç—Ä—ã;
    4) farthest-point sampling –¥–æ n_final –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è.
    """
    img = img.convert("RGB")
    img_small = downscale(img, 600)
    X = np.array(img_small).reshape(-1, 3).astype(np.float32)

    # –°—ç–º–ø–ª–∏–º –¥–æ 50–∫ –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if len(X) > 50_000:
        idx = np.random.choice(len(X), 50_000, replace=False)
        X = X[idx]

    # KMeans oversample
    k = max(n_final + 8, oversample)
    km = KMeans(n_clusters=k, n_init="auto", random_state=42)
    km.fit(X)
    centers = km.cluster_centers_.astype(int)

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª—ë—Ä—ã (—Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–∏–µ —Ü–µ–Ω—Ç—Ä—ã)
    keep = []
    thr = 12.0  # –ø–æ—Ä–æ–≥ –±–ª–∏–∑–æ—Å—Ç–∏ –≤ RGB
    for c in centers:
        if all(np.linalg.norm(c - np.array(p)) > thr for p in keep):
            keep.append(tuple(c.tolist()))
    centers = np.array(keep, dtype=np.float32)

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —á–∏—Å—Ç–∫–∏ —Ü–µ–Ω—Ç—Ä–æ–≤ –º–µ–Ω—å—à–µ, —á–µ–º –Ω–∞–¥–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∏—Ä–∞–µ–º
    if len(centers) <= n_final:
        chosen = centers
    else:
        # Farthest Point Sampling (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞)
        chosen = []
        # —Å—Ç–∞—Ä—Ç—É–µ–º —Å —Å–∞–º–æ–≥–æ ‚Äú—Å—Ä–µ–¥–Ω–µ–≥–æ‚Äù —Ü–µ–Ω—Ç—Ä–∞ –ø–æ —Å—É–º–º–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
        dist_sum = ((centers[None, :, :] - centers[:, None, :]) ** 2).sum(axis=2) ** 0.5
        start_idx = int(np.argmin(dist_sum.sum(axis=1)))
        chosen.append(centers[start_idx])

        remain = np.delete(centers, start_idx, axis=0)
        dmin = np.linalg.norm(remain - chosen[0], axis=1)

        for _ in range(n_final - 1):
            j = int(np.argmax(dmin))
            chosen.append(remain[j])
            remain = np.delete(remain, j, axis=0)
            if len(remain) == 0:
                break
            dmin = np.minimum(dmin, np.linalg.norm(remain - chosen[-1], axis=1))

        chosen = np.array(chosen)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ‚Äú—Å–≤–µ—Ç–ª–æ—Ç–µ‚Äù –¥–ª—è –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–≥–æ –≤–∏–¥–∞ (—Ñ–æ—Ä–º—É–ª–∞ luma)
    def luma(c):
        r, g, b = c
        return 0.2126 * r + 0.7152 * g + 0.0722 * b

    colors = sorted([tuple(map(int, c)) for c in chosen], key=luma, reverse=True)
    # —Ñ–∏–Ω–∞–ª—å–Ω–æ ‚Äî —Ä–æ–≤–Ω–æ n_final (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ)
    colors = (colors + colors[:n_final])[:n_final]
    return colors


def _text_size(draw: ImageDraw.ImageDraw, text: str, font: ImageFont.FreeTypeFont) -> Tuple[int, int]:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å Pillow 10/11: –≤–º–µ—Å—Ç–æ textsize –∏—Å–ø–æ–ª—å–∑—É–µ–º textbbox."""
    bbox = draw.textbbox((0, 0), text, font=font)
    return (bbox[2] - bbox[0], bbox[3] - bbox[1])


def render_palette_card(colors: List[Tuple[int, int, int]]) -> Image.Image:
    """–†–∏—Å—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É 3x4 —Å –ø–æ–¥–ø–∏—Å—è–º–∏ HEX –ø–æ–¥ –∫–∞–∂–¥—ã–º —Ü–≤–µ—Ç–æ–º."""
    cols, rows = CARD_COLUMNS, CARD_ROWS
    assert len(colors) == cols * rows

    W = PADDING * 2 + cols * TILE_W + (cols - 1) * GAP
    H = PADDING * 2 + rows * TILE_H + (rows - 1) * GAP
    card = Image.new("RGB", (W, H), BG_COLOR)
    draw = ImageDraw.Draw(card)

    # –®—Ä–∏—Ñ—Ç: —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å DejaVuSans, –∏–Ω–∞—á–µ ‚Äì —Å–∏—Å—Ç–µ–º–Ω—ã–π
    try:
        font = ImageFont.truetype("DejaVuSans.ttf", 44)
    except Exception:
        font = ImageFont.load_default()

    for i, color in enumerate(colors):
        cx = i % cols
        cy = i // cols
        x = PADDING + cx * (TILE_W + GAP)
        y = PADDING + cy * (TILE_H + GAP)

        # —Å–∞–º —Ü–≤–µ—Ç
        draw.rounded_rectangle(
            (x, y, x + TILE_W, y + TILE_H - 70),
            radius=32,
            fill=tuple(color),
            outline=(230, 230, 230),
            width=3,
        )

        # –ø–æ–¥–ø–∏—Å—å
        hex_text = rgb_to_hex(color)
        tw, th = _text_size(draw, hex_text, font)
        tx = x + (TILE_W - tw) // 2
        ty = y + TILE_H - 60

        # –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
        r, g, b = color
        text_color = (0, 0, 0) if (0.2126*r + 0.7152*g + 0.0722*b) > 140 else (255, 255, 255)

        # –ª—ë–≥–∫–∞—è –ø–æ–¥–ª–æ–∂–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        draw.rounded_rectangle((tx - 10, ty - 6, tx + tw + 10, ty + th + 6), radius=10, fill=(255, 255, 255, 200))
        draw.text((tx, ty), hex_text, font=font, fill=text_color)

    return card


# ========= –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ =========
async def is_subscribed(bot: Bot, user_id: int) -> bool:
    try:
        m = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return m.status in {ChatMemberStatus.MEMBER, ChatMemberStatus.CREATOR, ChatMemberStatus.ADMINISTRATOR}
    except Exception as e:
        log.warning("check subscription failed: %s", e)
        # –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ‚Äî —Å—á–∏—Ç–∞–µ–º –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        return False


# ========= –•—ç–Ω–¥–ª–µ—Ä—ã =========
async def on_start(message: Message, bot: Bot):
    if not await is_subscribed(bot, message.from_user.id):
        kb = (
            "[–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è](https://t.me/desbalances)  ‚Ä¢  "
            "[–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É](/start)"
        )
        await message.answer(
            "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º, –Ω—É–∂–Ω–æ –±—ã—Ç—å **–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞** @desbalances.\n\n"
            "–ù–∞–∂–º–∏ ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è¬ª, –≤–µ—Ä–Ω–∏—Å—å –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ /start.",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
        )
        await message.answer(kb, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True)
        return

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî  –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ü–≤–µ—Ç–æ–≤ –æ—Ç –î–ò–ó –ë–ê–õ–ê–ù–° üé® "
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ **—Ñ–æ—Ç–æ**, –∞ —è —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ **—Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É** –≤ –æ—Ç–≤–µ—Ç.",
        parse_mode=ParseMode.MARKDOWN,
    )


async def on_photo(message: Message, bot: Bot):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    if not await is_subscribed(bot, message.from_user.id):
        await on_start(message, bot)
        return

    try:
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        buf = io.BytesIO()
        await bot.download(file, destination=buf)
        buf.seek(0)

        img = Image.open(buf).convert("RGB")
        colors = extract_palette(img, n_final=NUM_COLORS)
        card = render_palette_card(colors)
        png = pil_to_bytes(card, "PNG")

        caption = "–ü–∞–ª–∏—Ç—Ä–∞: " + "  ".join(rgb_to_hex(c) for c in colors)

        await message.answer_photo(
            photo=BufferedInputFile(png, filename="palette.png"),
            caption=caption,
        )

    except Exception as e:
        log.exception("process failed")
        await message.answer(
            f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {type(e).__name__}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –µ—â—ë —Ä–∞–∑."
        )


# ========= –ó–∞–ø—É—Å–∫ =========
async def main():
    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )
    dp = Dispatcher()
    dp.message.register(on_start, CommandStart())
    dp.message.register(on_photo, F.photo)

    log.info("color-bot: –±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ö–∞–Ω–∞–ª: %s", CHANNEL_USERNAME)

    # –∑–∞—â–∏—Ç–∞ –æ—Ç ¬´409 Conflict¬ª: –ø—Ä–æ—Å—Ç–æ –æ–¥–∏–Ω polling; –µ—Å–ª–∏ Render —Å–æ–∑–¥–∞—Å—Ç –¥—É–±–ª–∏–∫–∞—Ç ‚Äî Telegram –æ—Ç—Ä–µ–∂–µ—Ç –µ–≥–æ
    while True:
        try:
            await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
        except TelegramConflictError:
            # –¥—Ä—É–≥–∞—è –∫–æ–ø–∏—è —É–∂–µ —á–∏—Ç–∞–µ—Ç updates
            log.error("Conflict: —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π –∏–Ω—Å—Ç–∞–Ω—Å. –ñ–¥—É –∏ –ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞‚Ä¶")
            await asyncio.sleep(5)
        except Exception:
            log.exception("Polling crashed, restart in 3s")
            await asyncio.sleep(3)


if __name__ == "__main__":
    asyncio.run(main())
