
import os
import io
import math
import asyncio
from typing import List, Tuple

import numpy as np
from PIL import Image, ImageDraw, ImageFont, ImageColor
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode, ChatMemberStatus
from aiogram.filters import CommandStart
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.types.input_file import BufferedInputFile

# ========= –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =========
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
CHANNEL_USERNAME = "desbalances"  # –±–µ–∑ @
NUM_COLORS = 12
PRECLUSTERS = 18  # –±–µ—Ä–µ–º –±–æ–ª—å—à–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–≤–ª—è–µ–º 12 —Å–∞–º—ã—Ö —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω—ã—Ö

if not BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# aiogram 3.7+ vs 3.6 fallback: –≤–∫–ª—é—á–∞–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥
try:
    from aiogram.client.default_bot_properties import DefaultBotProperties
    bot = Bot(token=BOT_TOKEN, default_bot_properties=DefaultBotProperties(parse_mode=ParseMode.HTML))
except Exception:
    bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)

dp = Dispatcher()
router = Router()
dp.include_router(router)

# ========= –£—Ç–∏–ª–∏—Ç—ã =========
def pil_text_size(draw: ImageDraw.ImageDraw, font: ImageFont.FreeTypeFont, text: str) -> Tuple[int, int]:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å Pillow>=10: –∏—Å–ø–æ–ª—å–∑—É–µ–º textbbox –≤–º–µ—Å—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ textsize."""
    bbox = draw.textbbox((0, 0), text, font=font)
    return bbox[2] - bbox[0], bbox[3] - bbox[1]

def rgb_to_hex(rgb: Tuple[int, int, int]) -> str:
    return "#{:02x}{:02x}{:02x}".format(*rgb)

def hex_to_rgb(s: str) -> Tuple[int, int, int]:
    return ImageColor.getrgb(s)

def preprocess_image(img: Image.Image, target_max=512) -> np.ndarray:
    # –ø—Ä–∏–≤–æ–¥–∏–º –∫ —É–º–µ—Ä–µ–Ω–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
    w, h = img.size
    scale = min(1.0, target_max / max(w, h))
    if scale < 1.0:
        img = img.resize((int(w * scale), int(h * scale)), Image.LANCZOS)
    arr = np.asarray(img.convert("RGB"), dtype=np.uint8)
    return arr

def kmeans_palette(arr: np.ndarray, n_pre: int, n_final: int) -> List[Tuple[int, int, int]]:
    # lazy import, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å
    from sklearn.cluster import KMeans

    pixels = arr.reshape(-1, 3).astype(np.float32)

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —è—Ä–∫–æ—Å—Ç—å, —á—Ç–æ–±—ã –Ω–µ ¬´–∑–∞–±–∏–≤–∞–ª–æ¬ª —Å–µ—Ä—ã–º–∏ —Ç–æ–Ω–∞–º–∏
    pixels_lab = rgb_to_oklab(pixels)  # (N,3) –≤ Oklab ‚Äî –ª—É—á—à–µ —Ä–∞–∑–Ω–æ—Å–∏—Ç –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ–º—ã–µ —Ü–≤–µ—Ç–∞

    # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Å –∑–∞–ø–∞—Å–æ–º
    km = KMeans(n_clusters=n_pre, n_init="auto", init="k-means++", random_state=42)
    labels = km.fit_predict(pixels_lab)
    centers_lab = km.cluster_centers_

    # –í–µ—Å –∫–ª–∞—Å—Ç–µ—Ä–∞ = —Å–∫–æ–ª—å–∫–æ –ø–∏–∫—Å–µ–ª–µ–π
    counts = np.bincount(labels, minlength=n_pre).astype(np.float32)

    # –ü–µ—Ä–µ–≤–æ–¥ —Ü–µ–Ω—Ç—Ä–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ RGB
    centers_rgb = oklab_to_rgb(centers_lab).clip(0, 255).astype(np.uint8)

    # –û—Ç–±–∏—Ä–∞–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é 12‚Äë–∫—É: –∂–∞–¥–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∞–º—ã–π ¬´—Ç—è–∂–µ–ª—ã–π¬ª, –∑–∞—Ç–µ–º –∫–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–∞–ª–µ–∫–∏–π
    chosen = []
    chosen_idx = int(np.argmax(counts))
    chosen.append(chosen_idx)

    def dist(i, j):
        # —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ Oklab (–≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ–º–æ–µ)
        di = centers_lab[i] - centers_lab[j]
        return float(np.sqrt(np.dot(di, di)))

    while len(chosen) < n_final and len(chosen) < len(centers_rgb):
        best = -1
        best_score = -1.0
        for i in range(len(centers_rgb)):
            if i in chosen:
                continue
            # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö (—á—Ç–æ–±—ã –Ω–µ –±—Ä–∞—Ç—å ¬´–ø–æ—Ö–æ–∂–∏–π¬ª)
            dmin = min(dist(i, j) for j in chosen)
            # —Å–º–µ—à–∞–Ω–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π: —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ * –≤–µ—Å
            score = dmin * (1.0 + math.log1p(counts[i]))
            if score > best_score:
                best_score = score
                best = i
        if best == -1:
            break
        chosen.append(best)

    # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Ü–µ–Ω—Ç—Ä–æ–≤ –º–µ–Ω—å—à–µ 12 ‚Äî –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º —Å–∫–æ–ª—å–∫–æ –µ—Å—Ç—å
    palette = [tuple(int(x) for x in centers_rgb[i]) for i in chosen[:n_final]]
    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ –≤—ã—à–ª–æ –º–µ–Ω—å—à–µ ‚Äî –¥–æ–±—å—ë–º –Ω–∞–∏–±–æ–ª–µ–µ ¬´–≤–µ—Å–æ–º—ã–º–∏¬ª –Ω–µ–≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏
    if len(palette) < n_final:
        remain = [i for i in np.argsort(-counts) if i not in chosen]
        for i in remain[: n_final - len(palette)]:
            palette.append(tuple(int(x) for x in centers_rgb[i]))
    return palette

def rgb_to_oklab(rgb: np.ndarray) -> np.ndarray:
    """rgb [0..255] -> Oklab. –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ."""
    # –Ω–æ—Ä–º–∏—Ä—É–µ–º
    rgb = rgb / 255.0
    # –ª–∏–Ω–µ–π–Ω–æ–µ RGB (sRGB)
    def srgb_to_linear(c):
        a = 0.055
        return np.where(c <= 0.04045, c / 12.92, ((c + a) / (1 + a)) ** 2.4)
    lrgb = srgb_to_linear(rgb)

    # –º–∞—Ç—Ä–∏—Ü–∞ –≤ LMS (–∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ Oklab)
    M = np.array([
        [0.4122214708, 0.5363325363, 0.0514459929],
        [0.2119034982, 0.6806995451, 0.1073969566],
        [0.0883024619, 0.2817188376, 0.6299787005],
    ], dtype=np.float64)
    lms = lrgb @ M.T
    lms = np.cbrt(lms)  # –∫—É–±–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–µ–Ω—å

    ML = np.array([
        [0.2104542553, 0.7936177850, -0.0040720468],
        [1.9779984951, -2.4285922050, 0.4505937099],
        [0.0259040371, 0.7827717662, -0.8086757660],
    ], dtype=np.float64)
    return lms @ ML.T

def oklab_to_rgb(lab: np.ndarray) -> np.ndarray:
    """Oklab -> rgb [0..255]. –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ."""
    # –æ–±—Ä–∞—Ç–Ω—ã–µ –º–∞—Ç—Ä–∏—Ü—ã
    ML_inv = np.array([
        [ 1.0,  0.3963377774,  0.2158037573],
        [ 1.0, -0.1055613458, -0.0638541728],
        [ 1.0, -0.0894841775, -1.2914855480],
    ], dtype=np.float64)
    lms = lab @ ML_inv.T
    lms = np.power(lms, 3.0)

    M_inv = np.array([
        [ 4.0767416621, -3.3077115913,  0.2309699292],
        [-1.2684380046,  2.6097574011, -0.3413193965],
        [-0.0041960863, -0.7034186147,  1.7076147010],
    ], dtype=np.float64)
    lrgb = lms @ M_inv.T

    def linear_to_srgb(c):
        a = 0.055
        return np.where(c <= 0.0031308, 12.92 * c, (1 + a) * (c ** (1 / 2.4)) - a)

    srgb = linear_to_srgb(lrgb).clip(0.0, 1.0)
    return (srgb * 255.0)

def render_palette_card(colors: List[Tuple[int, int, int]]) -> bytes:
    cols, rows = 4, 3  # 12 —Ü–≤–µ—Ç–æ–≤ = 4x3
    cell_w, cell_h = 320, 240
    pad = 16
    label_h = 56
    w = cols * cell_w + (cols + 1) * pad
    h = rows * (cell_h + label_h) + (rows + 1) * pad

    img = Image.new("RGB", (w, h), (245, 245, 245))
    draw = ImageDraw.Draw(img)

    # –®—Ä–∏—Ñ—Ç: –µ—Å–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç ttf ‚Äî Pillow –ø–æ–¥—Å—Ç–∞–≤–∏—Ç –¥–µ—Ñ–æ–ª—Ç
    try:
        font = ImageFont.truetype("DejaVuSans.ttf", 36)
    except Exception:
        font = ImageFont.load_default()

    for idx, rgb in enumerate(colors):
        r, c = divmod(idx, cols)
        x0 = pad + c * (cell_w + pad)
        y0 = pad + r * (cell_h + label_h + pad)
        # –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Ü–≤–µ—Ç–∞
        draw.rectangle([x0, y0, x0 + cell_w, y0 + cell_h], fill=rgb)
        # –ø–æ–¥–ø–∏—Å—å HEX
        hx = rgb_to_hex(rgb)
        tw, th = pil_text_size(draw, font, hx)
        tx = x0 + (cell_w - tw) // 2
        ty = y0 + cell_h + (label_h - th) // 2
        # –ø–æ–¥–ª–æ–∂–∫–∞ –ø–æ–¥ —Ç–µ–∫—Å—Ç (–ª–µ–≥–∫–∏–π –±–µ–ª—ã–π)
        draw.rectangle([x0, y0 + cell_h, x0 + cell_w, y0 + cell_h + label_h], fill=(255, 255, 255))
        draw.text((tx, ty), hx, fill=(20, 20, 20), font=font)

    bio = io.BytesIO()
    img.save(bio, format="PNG")
    return bio.getvalue()

async def is_subscriber(user_id: int) -> bool:
    try:
        chat = await bot.get_chat(f"@{CHANNEL_USERNAME}")
        cm = await bot.get_chat_member(chat.id, user_id)
        return cm.status in {
            ChatMemberStatus.MEMBER,
            ChatMemberStatus.ADMINISTRATOR,
            ChatMemberStatus.CREATOR,
            ChatMemberStatus.OWNER,  # –Ω–∞ –≤—Å—è–∫–∏–π
        }
    except Exception:
        # –µ—Å–ª–∏ —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª ‚Äî –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è –∏ –ø–æ–ø—Ä–æ—Å–∏–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        return False

def sub_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üìå –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME}"),
        InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub"),
    ]])

# ========= –•—ç–Ω–¥–ª–µ—Ä—ã =========
WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî  –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ü–≤–µ—Ç–æ–≤ –æ—Ç –î–ò–ó –ë–ê–õ–ê–ù–° üé® "
    "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∞ —è —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É –≤ –æ—Ç–≤–µ—Ç."
)

@router.message(CommandStart())
async def on_start(message: Message):
    if await is_subscriber(message.from_user.id):
        await message.answer(WELCOME_TEXT)
    else:
        await message.answer(
            "–ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∫–∞–Ω–∞–ª–∞. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
            reply_markup=sub_keyboard()
        )

@router.callback_query(F.data == "check_sub")
async def on_check_sub(cb: types.CallbackQuery):
    if await is_subscriber(cb.from_user.id):
        await cb.message.edit_text(WELCOME_TEXT)
    else:
        await cb.answer("–ü–æ–∫–∞ –Ω–µ –≤–∏–∂—É –ø–æ–¥–ø–∏—Å–∫–∏. –ü—Ä–æ–≤–µ—Ä—å –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.", show_alert=True)

@router.message(F.photo)
async def on_photo(message: Message):
    # –∑–∞—â–∏—Ç–∞: —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏
    if not await is_subscriber(message.from_user.id):
        await message.answer(
            "–ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∫–∞–Ω–∞–ª–∞. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
            reply_markup=sub_keyboard()
        )
        return

    try:
        file_id = message.photo[-1].file_id
        file = await bot.get_file(file_id)
        file_bytes = await bot.download_file(file.file_path)
        img = Image.open(io.BytesIO(file_bytes.read()))

        arr = preprocess_image(img)
        colors = kmeans_palette(arr, PRECLUSTERS, NUM_COLORS)

        png = render_palette_card(colors)
        input_file = BufferedInputFile(png, filename="palette.png")
        await message.answer_photo(
            photo=input_file,
            caption="–ì–æ—Ç–æ–≤–æ! –ü–∞–ª–∏—Ç—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ç–æ."
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {type(e).__name__}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –µ—â—ë —Ä–∞–∑.")

# ========= –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ =========
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
