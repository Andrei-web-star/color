#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import io
import asyncio
import logging
from typing import List, Tuple

import numpy as np
from PIL import Image, ImageDraw, ImageFont
from sklearn.cluster import KMeans

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile

# ------------------ –ù–ê–°–¢–†–û–ô–ö–ò ------------------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()  # —Ç–æ–∫–µ–Ω –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –∏–∑ ENV!
if not BOT_TOKEN:
    raise SystemExit("‚ùó –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")

CHANNEL_ID = -1002608787147                  # <-- —Ç–≤–æ–π –∫–∞–Ω–∞–ª (–º–æ–∂–Ω–æ —Å–≤–µ—Ç–∏—Ç—å)
CHANNEL_USERNAME = "assistantdesign"         # <-- username –±–µ–∑ @

COLORS_COUNT = 12        # 3√ó4
GRID_COLS = 3
GRID_ROWS = 4
HEX_FONT_SIZE = 58       # ¬´–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π¬ª –∫—Ä—É–ø–Ω—ã–π —Ä–∞–∑–º–µ—Ä
PADDING = 36             # –≤–Ω–µ—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã –∏ ¬´—à–∞–≥¬ª —Å–µ—Ç–∫–∏

GREETING = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî  –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ü–≤–µ—Ç–æ–≤ –æ—Ç –î–ò–ó –ë–ê–õ–ê–ù–° üé® "
    "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∞ —è —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É –≤ –æ—Ç–≤–µ—Ç."
)
ASK_PDF = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PDF?"

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
log = logging.getLogger("ColorPaletteBOT")

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()


# ------------------ –®–†–ò–§–¢ ------------------
def load_font(size: int) -> ImageFont.ImageFont:
    candidates = [
        "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",  # Linux
        "/System/Library/Fonts/Supplemental/Arial.ttf",     # macOS
        "/Library/Fonts/Arial.ttf",                         # macOS
        "C:\\Windows\\Fonts\\arial.ttf",                    # Windows
    ]
    for p in candidates:
        try:
            return ImageFont.truetype(p, size)
        except Exception:
            continue
    return ImageFont.load_default()


# ------------------ –¶–í–ï–¢–ê / –ü–ê–õ–ò–¢–†–ê ------------------
def rgb_to_hex(rgb: Tuple[int, int, int]) -> str:
    return "#{:02x}{:02x}{:02x}".format(*rgb)


def sort_colors_by_hue(colors: np.ndarray) -> np.ndarray:
    import colorsys
    hsv = [colorsys.rgb_to_hsv(c[0]/255, c[1]/255, c[2]/255) for c in colors]
    idx = np.lexsort((np.array([s for h,s,v in hsv]), np.array([h for h,s,v in hsv])))
    return colors[idx]


def extract_palette(img: Image.Image, n_colors: int = 12) -> np.ndarray:
    """–ò–∑–≤–ª–µ–∫–∞–µ–º n_colors –¥–æ–º–∏–Ω–∞–Ω—Ç–æ–≤ KMeans –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—Ç—Ç–µ–Ω–∫—É (–±–µ–∑ ¬´—Å–º—è–≥—á–µ–Ω–∏—è –∫ –±–µ–ª–æ–º—É¬ª)."""
    base = img.convert("RGB")
    base.thumbnail((640, 640), Image.LANCZOS)
    arr = np.asarray(base, dtype=np.uint8).reshape(-1, 3)

    if arr.shape[0] > 120_000:
        sel = np.random.choice(arr.shape[0], 120_000, replace=False)
        arr = arr[sel]

    km = KMeans(n_clusters=n_colors, n_init=6, random_state=42)
    km.fit(arr)
    centers = np.clip(km.cluster_centers_.round().astype(np.uint8), 0, 255)
    return sort_colors_by_hue(centers)


def draw_palette_grid(colors: np.ndarray, cols=3, rows=4) -> Image.Image:
    """–ö–∞—Ä—Ç–æ—á–∫–∞ 3√ó4: –±–æ–ª—å—à–æ–π —Å–≤–æ—Ç—á + –∫—Ä—É–ø–Ω—ã–π HEX –ø–æ–¥ –Ω–∏–º. –ë–µ–∑ —Å–ø–∏—Å–∫–æ–≤ –≤–Ω–∏–∑—É."""
    assert len(colors) >= cols*rows
    card_w = 320
    swatch_h = 200
    label_h = 100

    W = PADDING*2 + cols*card_w + (cols-1)*PADDING
    H = PADDING*2 + rows*(swatch_h + label_h) + (rows-1)*PADDING

    im = Image.new("RGB", (W, H), "white")
    draw = ImageDraw.Draw(im)
    font = load_font(HEX_FONT_SIZE)

    k = 0
    for r in range(rows):
        for c in range(cols):
            if k >= len(colors):
                break
            x = PADDING + c*(card_w + PADDING)
            y = PADDING + r*(swatch_h + label_h + PADDING)

            color = tuple(int(v) for v in colors[k])
            # —Å–≤–æ—Ç—á
            draw.rectangle([x, y, x + card_w, y + swatch_h], fill=color)

            # –ø–æ–¥–ø–∏—Å—å HEX
            hex_code = rgb_to_hex(color)
            tw, th = draw.textbbox((0, 0), hex_code, font=font)[2:]
            tx = x + (card_w - tw)//2
            ty = y + swatch_h + (label_h - th)//2
            draw.text((tx, ty), hex_code, fill=(28, 54, 54), font=font)
            k += 1

    return im


def make_png_bytes(image: Image.Image) -> bytes:
    buf = io.BytesIO()
    image.save(buf, format="PNG", optimize=True)
    return buf.getvalue()


def make_pdf_bytes(image: Image.Image) -> bytes:
    buf = io.BytesIO()
    image.convert("RGB").save(buf, format="PDF")
    return buf.getvalue()


# –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —á–∞—Ç—É/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–¥–ª—è /pdf)
LAST_CARD_IMG: dict[int, Image.Image] = {}


# ------------------ –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ------------------
async def is_subscriber(user_id: int) -> bool:
    try:
        m = await bot.get_chat_member(CHANNEL_ID, user_id)
        return m.status in ("member", "administrator", "creator")
    except Exception as e:
        log.warning(f"subscription check failed: {e}")
        # –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ‚Äî –∑–∞–ø—Ä–µ—â–∞–µ–º
        return False


# ------------------ –•–ï–ù–î–õ–ï–†–´ ------------------
@dp.message(CommandStart())
async def on_start(message: types.Message):
    await message.answer(GREETING)


@dp.message(Command("pdf"))
async def on_pdf(message: types.Message):
    img = LAST_CARD_IMG.get(message.chat.id) or LAST_CARD_IMG.get(message.from_user.id)
    if not img:
        await message.answer("–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–∞–ª–∏—Ç—Ä—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        return
    pdf = make_pdf_bytes(img)
    await message.answer_document(document=InputFile(io.BytesIO(pdf), filename="palette.pdf"),
                                  caption="–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ PDF.")


@dp.callback_query()
async def on_cb(call: types.CallbackQuery):
    if call.data == "save_pdf":
        img = LAST_CARD_IMG.get(call.message.chat.id) or LAST_CARD_IMG.get(call.from_user.id)
        if not img:
            await call.answer("–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–∞–ª–∏—Ç—Ä—ã", show_alert=True)
            return
        pdf = make_pdf_bytes(img)
        await call.message.reply_document(document=InputFile(io.BytesIO(pdf), filename="palette.pdf"),
                                          caption="–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ PDF.")
        await call.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")
    else:
        await call.answer()


@dp.message(F.photo & (F.chat.type == "private"))
async def on_private_photo(message: types.Message):
    # –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∫–∞–Ω–∞–ª–∞
    if not await is_subscriber(message.from_user.id):
        await message.reply(f"–≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∫–∞–Ω–∞–ª–∞ @{CHANNEL_USERNAME}.")
        return

    # —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ
    file = await bot.get_file(message.photo[-1].file_id)
    bio = io.BytesIO()
    await bot.download_file(file.file_path, bio)
    bio.seek(0)
    img = Image.open(bio).convert("RGB")

    # –ø–∞–ª–∏—Ç—Ä–∞
    colors = extract_palette(img, COLORS_COUNT)
    card = draw_palette_grid(colors, GRID_COLS, GRID_ROWS)
    LAST_CARD_IMG[message.from_user.id] = card
    LAST_CARD_IMG[message.chat.id] = card  # –Ω–∞ –≤—Å—è–∫–∏–π

    png = make_png_bytes(card)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PDF", callback_data="save_pdf")]
    ])
    await message.reply_photo(photo=png, caption=ASK_PDF, reply_markup=kb)


@dp.channel_post(F.photo)  # –ø–æ—Å—Ç—ã –≤ —Å–∞–º–æ–º –∫–∞–Ω–∞–ª–µ
async def on_channel_photo(message: types.Message):
    # –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    if message.chat.id != CHANNEL_ID:
        return

    file = await bot.get_file(message.photo[-1].file_id)
    bio = io.BytesIO()
    await bot.download_file(file.file_path, bio)
    bio.seek(0)
    img = Image.open(bio).convert("RGB")

    colors = extract_palette(img, COLORS_COUNT)
    card = draw_palette_grid(colors, GRID_COLS, GRID_ROWS)
    LAST_CARD_IMG[message.chat.id] = card

    png = make_png_bytes(card)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PDF", callback_data="save_pdf")]
    ])
    # –æ—Ç–≤–µ—á–∞–µ–º —Ä–µ–ø–ª–∞–µ–º –Ω–∞ –ø–æ—Å—Ç
    await bot.send_photo(chat_id=message.chat.id, photo=png,
                         caption=ASK_PDF,
                         reply_to_message_id=message.message_id,
                         reply_markup=kb)


# ------------------ –ó–ê–ü–£–°–ö (–æ–¥–∏–Ω, –±–µ–∑ 409) ------------------
async def _delete_webhook():
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        log.info("Webhook removed (drop_pending_updates=True)")
    except Exception as e:
        log.warning(f"delete_webhook warning: {e}")

async def main():
    await _delete_webhook()
    await dp.start_polling(bot, allowed_updates=["message", "channel_post", "callback_query"])

if __name__ == "__main__":
    asyncio.run(main())
