# bot.py
import os
import io
import math
import logging
from typing import List, Tuple

import numpy as np
from PIL import Image, ImageDraw, ImageFont

from aiogram import Bot, Dispatcher, F, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    BufferedInputFile,
)

from sklearn.cluster import KMeans

# ---------- CONFIG ----------
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –ù–ï —Ö–∞—Ä–¥–∫–æ–¥–∏–º
CHANNEL_USERNAME = "@desbalances"            # –∫–∞–Ω–∞–ª-–ø–æ–¥–ø–∏—Å–∫–∞ (–ø—É–±–ª–∏—á–Ω—ã–π)
PALETTE_COLS = 3
PALETTE_ROWS = 4
PALETTE_SIZE = (900, 1200)  # —à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞ –∏—Ç–æ–≥–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
BORDER = 24                 # –≤–Ω–µ—à–Ω–∏–π –æ—Ç—Å—Ç—É–ø
GAP = 18                    # –∑–∞–∑–æ—Ä –º–µ–∂–¥—É –ø–ª–∏—Ç–∫–∞–º–∏
CAPTION_HTML = "–ü–∞–ª–∏—Ç—Ä–∞: "  # –ø—Ä–µ—Ñ–∏–∫—Å –∫ –ø–æ–¥–ø–∏—Å–∏
# ----------------------------

if not BOT_TOKEN:
    raise RuntimeError("–ù–µ—Ç TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("color-bot")

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()
rt = Router()
dp.include_router(rt)


# ===== Utils: —Ü–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è =====
def _srgb_to_linear(c: np.ndarray) -> np.ndarray:
    c = c / 255.0
    a = 0.055
    return np.where(c <= 0.04045, c / 12.92, ((c + a) / (1 + a)) ** 2.4)


def _rgb_to_xyz(rgb: np.ndarray) -> np.ndarray:
    # rgb: (..., 3) float in [0,255]
    r, g, b = [_srgb_to_linear(rgb[..., i]) for i in range(3)]
    # –º–∞—Ç—Ä–∏—Ü–∞ –¥–ª—è D65
    x = r * 0.4124564 + g * 0.3575761 + b * 0.1804375
    y = r * 0.2126729 + g * 0.7151522 + b * 0.0721750
    z = r * 0.0193339 + g * 0.1191920 + b * 0.9503041
    return np.stack([x, y, z], axis=-1)


def _xyz_to_lab(xyz: np.ndarray) -> np.ndarray:
    # –æ–ø–æ—Ä–Ω—ã–µ –±–µ–ª—ã–µ D65
    Xn, Yn, Zn = 0.95047, 1.0, 1.08883
    x, y, z = xyz[..., 0] / Xn, xyz[..., 1] / Yn, xyz[..., 2] / Zn

    def f(t):
        e = 216 / 24389
        k = 24389 / 27
        return np.where(t > e, np.cbrt(t), (k * t + 16) / 116)

    fx, fy, fz = f(x), f(y), f(z)
    L = 116 * fy - 16
    a = 500 * (fx - fy)
    b = 200 * (fy - fz)
    return np.stack([L, a, b], axis=-1)


def rgb_to_lab(rgb: np.ndarray) -> np.ndarray:
    return _xyz_to_lab(_rgb_to_xyz(rgb.astype(np.float32)))


def color_distance_lab(c1: np.ndarray, c2: np.ndarray) -> float:
    return float(np.linalg.norm(c1 - c2))


def hex_of(rgb: np.ndarray) -> str:
    r, g, b = [int(max(0, min(255, round(x)))) for x in rgb]
    return f"#{r:02x}{g:02x}{b:02x}"


# ===== –ê–ª–≥–æ—Ä–∏—Ç–º –ø–∞–ª–∏—Ç—Ä—ã =====
def extract_palette(
    pil_img: Image.Image,
    n_colors: int = 12,
    kmeans_buckets: int = 18,
    sample_max: int = 120000
) -> List[Tuple[np.ndarray, str]]:
    """
    1) —Ä–µ—Å–∞–π–∑ –∏ —Å—ç–º–ø–ª–∏–Ω–≥,
    2) —É–¥–∞–ª—è–µ–º —ç–∫—Å—Ç—Ä–µ–º—É–º—ã —è—Ä–∫–æ—Å—Ç–∏ –ø–æ –∫–≤–∞–Ω—Ç–∏–ª—è–º,
    3) KMeans -> —Ü–µ–Ω—Ç—Ä—ã,
    4) –≤—ã–±–∏—Ä–∞–µ–º 12 —Ü–≤–µ—Ç–æ–≤: –ø–µ—Ä–≤—ã–π ‚Äî –±–ª–∏–∂–µ –∫ –º–µ–¥–∏–∞–Ω–Ω–æ–π L*, –¥–∞–ª—å—à–µ –∂–∞–¥–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º
       –º–∞–∫—Å–∏–º–∏–∑–∏—Ä—É—è –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –ø–æ Lab (—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ).
    """
    img = pil_img.convert("RGB")
    # –º—è–≥–∫–∏–π —Ä–µ—Å–∞–π–∑ –¥–æ ~1–ú–ø, —á—Ç–æ–±—ã –∏ –∫–∞—á–µ—Å—Ç–≤–æ, –∏ —Å–∫–æ—Ä–æ—Å—Ç—å
    w, h = img.size
    scale = (1024 * 1024 / max(1, w * h)) ** 0.5
    if scale < 1.0:
        img = img.resize((int(w * scale), int(h * scale)), Image.LANCZOS)

    arr = np.asarray(img, dtype=np.uint8)
    flat = arr.reshape(-1, 3)
    # subsample
    if flat.shape[0] > sample_max:
        idx = np.random.choice(flat.shape[0], sample_max, replace=False)
        flat = flat[idx]

    # –æ—Ç—Å–µ–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º —Ç—ë–º–Ω—ã–µ/—Å–≤–µ—Ç–ª—ã–µ –ø–æ V (HSV) –∫–≤–∞–Ω—Ç–∏–ª—è–º–∏
    # –ø—Ä–æ—Å—Ç–∞—è V: max(rgb)/255
    v = np.max(flat, axis=1).astype(np.float32) / 255.0
    lo, hi = np.quantile(v, [0.04, 0.96])
    mask = (v >= lo) & (v <= hi)
    base = flat[mask]
    if base.shape[0] < n_colors * 5:
        base = flat  # fallback –µ—Å–ª–∏ —Ñ–æ—Ç–æ –æ—á–µ–Ω—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ–µ

    # KMeans –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤ (–±–µ–∑ —Ç—è–∂—ë–ª—ã—Ö init-–∏—Ç–µ—Ä–∞—Ü–∏–π)
    km = KMeans(n_clusters=min(kmeans_buckets, len(base)), n_init=3, random_state=42)
    km.fit(base.astype(np.float32))
    centers = km.cluster_centers_.astype(np.float32)

    # –ü–µ—Ä–µ–≤–µ–¥—ë–º –≤ Lab –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏
    labs = rgb_to_lab(centers)

    # 1-–π —Ü–≤–µ—Ç ‚Äî –±–ª–∏–∂–µ –∫ –º–µ–¥–∏–∞–Ω–Ω–æ–º—É L*
    Ls = labs[:, 0]
    median_L = np.median(Ls)
    first_idx = int(np.argmin(np.abs(Ls - median_L)))

    selected = [first_idx]
    selected_lab = [labs[first_idx]]

    # –¥–∞–ª—å—à–µ ‚Äî greedy max-min (—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ)
    while len(selected) < min(n_colors, len(centers)):
        dists = []
        for i in range(len(centers)):
            if i in selected:
                dists.append(-1.0)
                continue
            # –º–∏–Ω. —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
            md = min(color_distance_lab(labs[i], s) for s in selected_lab)
            dists.append(md)
        next_idx = int(np.argmax(dists))
        if dists[next_idx] <= 0:
            break
        selected.append(next_idx)
        selected_lab.append(labs[next_idx])

    # –∏—Ç–æ–≥–æ–≤—ã–µ RGB –∏ HEX
    result_rgbs = [centers[i] for i in selected]
    hexes = [hex_of(c) for c in result_rgbs]
    return list(zip(result_rgbs, hexes))


def render_palette_card(colors: List[Tuple[np.ndarray, str]]) -> bytes:
    cols, rows = PALETTE_COLS, PALETTE_ROWS
    W, H = PALETTE_SIZE
    card = Image.new("RGB", (W, H), "white")
    draw = ImageDraw.Draw(card)

    cell_w = (W - 2 * BORDER - (cols - 1) * GAP) // cols
    cell_h = (H - 2 * BORDER - (rows - 1) * GAP) // rows

    # –ü–æ–¥–ø–∏—Å–∏ —à—Ä–∏—Ñ—Ç–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç ttf)
    font = ImageFont.load_default()

    # —Ä–∏—Å—É–µ–º –ø–ª–∏—Ç–∫–∏
    i = 0
    for r in range(rows):
        for c in range(cols):
            if i >= len(colors):
                break
            rgb, hx = colors[i]
            x0 = BORDER + c * (cell_w + GAP)
            y0 = BORDER + r * (cell_h + GAP)
            # –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Ü–≤–µ—Ç–∞
            draw.rectangle([x0, y0, x0 + cell_w, y0 + cell_h - 24], fill=tuple(map(int, rgb)))
            # –±–µ–ª–∞—è –ø–ª–∞—à–∫–∞ –ø–æ–¥ –ø–æ–¥–ø–∏—Å—å
            draw.rectangle([x0, y0 + cell_h - 24, x0 + cell_w, y0 + cell_h], fill="white")
            # –ø–æ–¥–ø–∏—Å—å
            tw, th = draw.textsize(hx, font=font)
            draw.text(
                (x0 + (cell_w - tw) // 2, y0 + cell_h - 20),
                hx,
                fill="black",
                font=font,
            )
            i += 1

    bio = io.BytesIO()
    card.save(bio, format="PNG", optimize=True)
    return bio.getvalue()


# ===== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ =====
async def is_subscribed(user_id: int) -> bool:
    try:
        m = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return m.status in ("member", "creator", "administrator")
    except Exception as e:
        log.warning("get_chat_member failed: %s", e)
        # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –Ω–µ –ø—É—Å–∫–∞—Ç—å
        return False


def subscribe_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"), KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")],
        ],
        resize_keyboard=True
    )


# ===== Handlers =====
WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî  –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ü–≤–µ—Ç–æ–≤ –æ—Ç –î–ò–ó –ë–ê–õ–ê–ù–° üé® "
    "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∞ —è —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É –≤ –æ—Ç–≤–µ—Ç."
)

@rt.message(CommandStart())
async def on_start(message: Message):
    user_id = message.from_user.id
    if await is_subscribed(user_id):
        await message.answer(WELCOME_TEXT)
    else:
        await message.answer(
            "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
            reply_markup=subscribe_keyboard(),
        )


@rt.message(F.text.lower().in_({"–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"}))
async def on_subscribe_button(message: Message):
    await message.answer("–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª –∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å: https://t.me/desbalances")


@rt.message(F.text.lower().in_({"–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"}))
@rt.message(Command("check"))
async def on_check(message: Message):
    if await is_subscribed(message.from_user.id):
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ ‚Äî —Å–¥–µ–ª–∞—é –ø–∞–ª–∏—Ç—Ä—É.")
    else:
        await message.answer("–ü–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@rt.message(F.photo)
async def on_photo(message: Message):
    user_id = message.from_user.id
    if not await is_subscribed(user_id):
        await message.answer(
            "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞.\n"
            "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
            reply_markup=subscribe_keyboard(),
        )
        return

    # —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –≤–µ—Ä—Å–∏—è —Ñ–æ—Ç–æ
    ph = message.photo[-1]
    try:
        # –∫–∞—á–∞–µ–º –≤ –ø–∞–º—è—Ç—å
        file = await bot.get_file(ph.file_id)
        buf = io.BytesIO()
        await bot.download(file, buf)
        buf.seek(0)

        img = Image.open(buf).convert("RGB")
        colors = extract_palette(img, n_colors=12, kmeans_buckets=20)
        png_bytes = render_palette_card(colors)

        # –ø–æ–¥–ø–∏—Å—å
        caption = CAPTION_HTML + " ".join(h for _, h in colors)

        # aiogram 3: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ BufferedInputFile
        photo_input = BufferedInputFile(png_bytes, filename="palette.png")
        await message.answer_photo(photo=photo_input, caption=caption)

    except Exception as e:
        log.exception("process failed")
        await message.answer(
            f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e.__class__.__name__}. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –µ—â—ë —Ä–∞–∑."
        )


async def main():
    log.info("color-bot | –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ö–∞–Ω–∞–ª: %s", CHANNEL_USERNAME)
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
