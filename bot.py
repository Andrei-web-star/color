import os
import io
from collections import Counter

import numpy as np
from PIL import Image, ImageDraw, ImageFont

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode, ChatMemberStatus
from aiogram.client.default_bot_properties import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types.input_file import BufferedInputFile

from sklearn.cluster import KMeans

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: "assistantdesign" –∏–ª–∏ "desbalances"

NUM_COLORS = 12
PREVIEW_MAX = 640  # –¥–æ —Ç–∞–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —É–º–µ–Ω—å—à–∞–µ–º –¥–ª–∏–Ω–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º


# ---------- —É—Ç–∏–ª–∏—Ç—ã ----------

def rgb_to_hex(rgb):
    return "#{:02x}{:02x}{:02x}".format(*rgb)


def extract_palette(img: Image.Image, n_colors: int = NUM_COLORS) -> list[tuple[int, int, int]]:
    # —É–º–µ–Ω—å—à–µ–Ω–∏–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    w, h = img.size
    scale = PREVIEW_MAX / max(w, h) if max(w, h) > PREVIEW_MAX else 1.0
    if scale != 1.0:
        img = img.resize((int(w * scale), int(h * scale)), Image.LANCZOS)

    arr = np.asarray(img.convert("RGB"), dtype=np.uint8)
    flat = arr.reshape(-1, 3)

    # –õ—ë–≥–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –ø—Ä–∏–±–∏—Ä–∞–µ–º –ø–æ—á—Ç–∏ –±–µ–ª—ã–µ –∏ –ø–æ—á—Ç–∏ —á—ë—Ä–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ (–±–ª–∏–∫–∏/—à—É–º—ã)
    brightness = flat.mean(axis=1)
    mask = (brightness > 8) & (brightness < 247)
    flat = flat[mask]
    if flat.shape[0] < n_colors * 20:
        # —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ ‚Äî –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
        flat = arr.reshape(-1, 3)

    # KMeans
    kmeans = KMeans(n_clusters=n_colors, n_init=6, random_state=42)
    labels = kmeans.fit_predict(flat)
    centers = np.clip(np.rint(kmeans.cluster_centers_), 0, 255).astype(np.uint8)

    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∫–ª–∞—Å—Ç–µ—Ä–∞ (—á–∞—Å—Ç–æ—Ç–∞)
    counts = Counter(labels)
    order = [idx for idx, _ in sorted(counts.items(), key=lambda kv: kv[1], reverse=True)]
    # –∏–Ω–¥–µ–∫—Å—ã —Ü–µ–Ω—Ç—Ä–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã
    # –Ω–æ —É –Ω–∞—Å order —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Ç–∫–∏, –Ω—É–∂–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫ —Ü–µ–Ω—Ç—Ä–∞–º:
    # —Å–æ–∑–¥–∞–¥–∏–º mapping: –º–µ—Ç–∫–∞ -> —Ü–µ–Ω—Ç—Ä
    label_to_center = {label: centers[label] for label in range(len(centers))}
    ordered = [tuple(int(c) for c in label_to_center[l]) for l in order]

    # –∏–Ω–æ–≥–¥–∞ kmeans –¥–∞—ë—Ç –æ—á–µ–Ω—å –±–ª–∏–∑–∫–∏–µ —Ü–≤–µ—Ç–∞ ‚Äî –Ω–µ–º–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ–∂–∏–º
    dedup = []
    for c in ordered:
        if all(np.linalg.norm(np.array(c) - np.array(p)) >= 10 for p in dedup):
            dedup.append(c)
        if len(dedup) == n_colors:
            break
    # –µ—Å–ª–∏ –ø–æ—Å–ª–µ —Ä–∞–∑—Ä–µ–∂–µ–Ω–∏—è –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ —Ü–≤–µ—Ç–æ–≤ ‚Äî –¥–æ–±—å—ë–º –∏—Å—Ö–æ–¥–Ω—ã–º–∏
    i = 0
    while len(dedup) < n_colors and i < len(ordered):
        if ordered[i] not in dedup:
            dedup.append(ordered[i])
        i += 1

    return dedup[:n_colors]


def render_palette_card(colors: list[tuple[int, int, int]]) -> bytes:
    # —Å–µ—Ç–∫–∞ 3√ó4
    cols, rows = 3, 4
    sw = 320     # —à–∏—Ä–∏–Ω–∞ –ø–ª–∞—à–∫–∏
    sh = 220     # –≤—ã—Å–æ—Ç–∞ –ø–ª–∞—à–∫–∏
    pad = 24     # –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–∞–¥–¥–∏–Ω–≥ –º–µ–∂–¥—É –ø–ª–∞—à–∫–∞–º–∏
    outer = 30   # –≤–Ω–µ—à–Ω–∏–µ –ø–æ–ª—è

    card_w = outer * 2 + cols * sw + (cols - 1) * pad
    card_h = outer * 2 + rows * sh + (rows - 1) * pad
    card = Image.new("RGB", (card_w, card_h), (245, 245, 245))
    draw = ImageDraw.Draw(card)
    font = ImageFont.load_default()

    for i, rgb in enumerate(colors[: rows * cols]):
        r, c = divmod(i, cols)
        x0 = outer + c * (sw + pad)
        y0 = outer + r * (sh + pad)
        swatch = Image.new("RGB", (sw, sh), rgb)
        card.paste(swatch, (x0, y0))

        # –ø–æ–¥–ø–∏—Å—å HEX –Ω–∞ —Å–≤–µ—Ç–ª–æ–π/—Ç—ë–º–Ω–æ–π –ø–æ–¥–ª–æ–∂–∫–µ
        hex_ = rgb_to_hex(rgb)
        text = hex_
        # –æ—Ü–µ–Ω–∏–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç (–ø—Ä–æ—Å—Ç–∞—è —è—Ä–∫–æ—Å—Ç—å)
        bright = (0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2])
        text_color = (0, 0, 0) if bright > 160 else (255, 255, 255)

        # –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ‚Äî —á–µ—Ä–µ–∑ textbbox (–≤ Pillow 10 –Ω–µ—Ç textsize)
        bbox = draw.textbbox((0, 0), text, font=font)
        tw = bbox[2] - bbox[0]
        th = bbox[3] - bbox[1]
        tx = x0 + sw - tw - 10
        ty = y0 + sh - th - 8

        # –ª—ë–≥–∫–∞—è —Ç–µ–Ω—å –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        shadow = (0, 0, 0) if text_color == (255, 255, 255) else (255, 255, 255)
        draw.text((tx + 1, ty + 1), text, font=font, fill=shadow)
        draw.text((tx, ty), text, font=font, fill=text_color)

    buf = io.BytesIO()
    card.save(buf, format="PNG")
    buf.seek(0)
    return buf.getvalue()


# ---------- aiogram ----------

dp = Dispatcher()

@dp.message(CommandStart())
async def cmd_start(message: Message, bot: Bot):
    if CHANNEL_USERNAME:
        try:
            member = await bot.get_chat_member(chat_id=f"@{CHANNEL_USERNAME}", user_id=message.from_user.id)
            if member.status not in (
                ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR, ChatMemberStatus.OWNER
            ):
                raise Exception("not_subscribed")
        except Exception:
            kb = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üìå –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME}"),
                InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub"),
            ]])
            await message.answer(
                "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∫–∞–Ω–∞–ª–∞.\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
                reply_markup=kb
            )
            return

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî  –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ü–≤–µ—Ç–æ–≤ –æ—Ç –î–ò–ó –ë–ê–õ–ê–ù–° üé® "
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∞ —è —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É –≤ –æ—Ç–≤–µ—Ç."
    )


@dp.callback_query(F.data == "check_sub")
async def on_check_subscription(cb, bot: Bot):
    try:
        member = await bot.get_chat_member(chat_id=f"@{CHANNEL_USERNAME}", user_id=cb.from_user.id)
        ok = member.status in (
            ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR, ChatMemberStatus.OWNER
        )
    except Exception:
        ok = False

    if ok:
        await cb.message.answer(
            "–°–ø–∞—Å–∏–±–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ ‚Äî –ø—Ä–∏—à–ª—é –ø–∞–ª–∏—Ç—Ä—É –∏–∑ 12 —Ü–≤–µ—Ç–æ–≤."
        )
    else:
        await cb.answer("–ï—â—ë –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ ü§è", show_alert=True)


@dp.message(F.photo)
async def on_photo(message: Message, bot: Bot):
    try:
        # —Å–∫–∞—á–∏–≤–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø—Ä–µ–≤—å—é
        photo = message.photo[-1]
        buf = io.BytesIO()
        await bot.download(photo, destination=buf)
        buf.seek(0)

        img = Image.open(buf).convert("RGB")
        colors = extract_palette(img, n_colors=NUM_COLORS)

        png_bytes = render_palette_card(colors)
        hex_line = " ".join(rgb_to_hex(c) for c in colors)

        await message.answer_photo(
            BufferedInputFile(png_bytes, filename="palette.png"),
            caption=f"–ü–∞–ª–∏—Ç—Ä–∞: {hex_line}"
        )
    except Exception as e:
        await message.answer(
            f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {type(e).__name__}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –µ—â—ë —Ä–∞–∑."
        )


async def main():
    # Bot c –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–ª—è aiogram 3.7+
    bot = Bot(
        token=BOT_TOKEN,
        default_bot_properties=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    print(f"color-bot: –±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ö–∞–Ω–∞–ª: @{CHANNEL_USERNAME}" if CHANNEL_USERNAME else "color-bot: –±–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
